syntax = "proto3";

package auth;

option go_package = "github.com/AYCOM/backend/services/auth/proto/auth";

// Auth service definition
service AuthService {
  // Register a new user
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  
  // Verify email address
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {}
  
  // Resend verification code
  rpc ResendVerificationCode(ResendVerificationCodeRequest) returns (ResendVerificationCodeResponse) {}
  
  // Login with email and password
  rpc Login(LoginRequest) returns (LoginResponse) {}
  
  // Validate token
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}
  
  // Refresh access token using refresh token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {}
  
  // Logout and invalidate tokens
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  
  // Google OAuth login
  rpc GoogleLogin(GoogleLoginRequest) returns (GoogleLoginResponse) {}
}

// RegisterRequest contains information needed to register a new user
message RegisterRequest {
  string name = 1;
  string username = 2;
  string email = 3;
  string password = 4;
  string confirm_password = 5;
  string gender = 6;
  string date_of_birth = 7;
  string security_question = 8;
  string security_answer = 9;
  bool subscribe_to_newsletter = 10;
  string recaptcha_token = 11;
}

// RegisterResponse contains the result of a registration request
message RegisterResponse {
  bool success = 1;
  string message = 2;
  string email = 3;
}

// VerifyEmailRequest contains the email and verification code for email verification
message VerifyEmailRequest {
  string email = 1;
  string verification_code = 2;
}

// VerifyEmailResponse contains the result of an email verification request
message VerifyEmailResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  string user_id = 5;
  string token_type = 6;
  int32 expires_in = 7;
}

// ResendVerificationCodeRequest contains the email to resend verification code to
message ResendVerificationCodeRequest {
  string email = 1;
}

// ResendVerificationCodeResponse contains the result of a resend verification code request
message ResendVerificationCodeResponse {
  bool success = 1;
  string message = 2;
}

// LoginRequest contains credentials for user login
message LoginRequest {
  string email = 1;
  string password = 2;
}

// LoginResponse contains the result of a login request
message LoginResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  string user_id = 5;
  string token_type = 6;
  int32 expires_in = 7;
}

// ValidateTokenRequest contains the token to validate
message ValidateTokenRequest {
  string token = 1;
}

// ValidateTokenResponse contains the result of a token validation request
message ValidateTokenResponse {
  bool valid = 1;
  string message = 2;
  string user_id = 3;
}

// RefreshTokenRequest contains the refresh token to use for getting a new access token
message RefreshTokenRequest {
  string refresh_token = 1;
}

// RefreshTokenResponse contains the result of a token refresh request
message RefreshTokenResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  string user_id = 5;
  string token_type = 6;
  int32 expires_in = 7;
}

// LogoutRequest contains the tokens to invalidate during logout
message LogoutRequest {
  string access_token = 1;
  string refresh_token = 2;
}

// LogoutResponse contains the result of a logout request
message LogoutResponse {
  bool success = 1;
  string message = 2;
}

// GoogleLoginRequest contains the Google ID token for authentication
message GoogleLoginRequest {
  string id_token = 1;
}

// GoogleLoginResponse contains the result of a Google login request
message GoogleLoginResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  string user_id = 5;
  string token_type = 6;
  int32 expires_in = 7;
}