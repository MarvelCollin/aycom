// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/thread.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThreadService_CreateThread_FullMethodName       = "/thread.ThreadService/CreateThread"
	ThreadService_GetThreadById_FullMethodName      = "/thread.ThreadService/GetThreadById"
	ThreadService_GetThreadsByUser_FullMethodName   = "/thread.ThreadService/GetThreadsByUser"
	ThreadService_UpdateThread_FullMethodName       = "/thread.ThreadService/UpdateThread"
	ThreadService_DeleteThread_FullMethodName       = "/thread.ThreadService/DeleteThread"
	ThreadService_CreateReply_FullMethodName        = "/thread.ThreadService/CreateReply"
	ThreadService_GetRepliesByThread_FullMethodName = "/thread.ThreadService/GetRepliesByThread"
	ThreadService_UpdateReply_FullMethodName        = "/thread.ThreadService/UpdateReply"
	ThreadService_DeleteReply_FullMethodName        = "/thread.ThreadService/DeleteReply"
	ThreadService_LikeThread_FullMethodName         = "/thread.ThreadService/LikeThread"
	ThreadService_UnlikeThread_FullMethodName       = "/thread.ThreadService/UnlikeThread"
	ThreadService_LikeReply_FullMethodName          = "/thread.ThreadService/LikeReply"
	ThreadService_UnlikeReply_FullMethodName        = "/thread.ThreadService/UnlikeReply"
	ThreadService_RepostThread_FullMethodName       = "/thread.ThreadService/RepostThread"
	ThreadService_RemoveRepost_FullMethodName       = "/thread.ThreadService/RemoveRepost"
	ThreadService_BookmarkThread_FullMethodName     = "/thread.ThreadService/BookmarkThread"
	ThreadService_RemoveBookmark_FullMethodName     = "/thread.ThreadService/RemoveBookmark"
	ThreadService_CreatePoll_FullMethodName         = "/thread.ThreadService/CreatePoll"
	ThreadService_VotePoll_FullMethodName           = "/thread.ThreadService/VotePoll"
	ThreadService_GetPollResults_FullMethodName     = "/thread.ThreadService/GetPollResults"
)

// ThreadServiceClient is the client API for ThreadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ThreadService defines all the operations related to threads
type ThreadServiceClient interface {
	// Thread operations
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	GetThreadById(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	GetThreadsByUser(ctx context.Context, in *GetThreadsByUserRequest, opts ...grpc.CallOption) (*ThreadsResponse, error)
	UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reply operations
	CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*ReplyResponse, error)
	GetRepliesByThread(ctx context.Context, in *GetRepliesByThreadRequest, opts ...grpc.CallOption) (*RepliesResponse, error)
	UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*ReplyResponse, error)
	DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Interaction operations
	LikeThread(ctx context.Context, in *LikeThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeThread(ctx context.Context, in *UnlikeThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LikeReply(ctx context.Context, in *LikeReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnlikeReply(ctx context.Context, in *UnlikeReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepostThread(ctx context.Context, in *RepostThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRepost(ctx context.Context, in *RemoveRepostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BookmarkThread(ctx context.Context, in *BookmarkThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBookmark(ctx context.Context, in *RemoveBookmarkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Poll operations
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*PollResponse, error)
	VotePoll(ctx context.Context, in *VotePollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPollResults(ctx context.Context, in *GetPollResultsRequest, opts ...grpc.CallOption) (*PollResultsResponse, error)
}

type threadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadServiceClient(cc grpc.ClientConnInterface) ThreadServiceClient {
	return &threadServiceClient{cc}
}

func (c *threadServiceClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThreadResponse)
	err := c.cc.Invoke(ctx, ThreadService_CreateThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetThreadById(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThreadResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetThreadById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetThreadsByUser(ctx context.Context, in *GetThreadsByUserRequest, opts ...grpc.CallOption) (*ThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThreadsResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetThreadsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThreadResponse)
	err := c.cc.Invoke(ctx, ThreadService_UpdateThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_DeleteThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*ReplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyResponse)
	err := c.cc.Invoke(ctx, ThreadService_CreateReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetRepliesByThread(ctx context.Context, in *GetRepliesByThreadRequest, opts ...grpc.CallOption) (*RepliesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepliesResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetRepliesByThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*ReplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyResponse)
	err := c.cc.Invoke(ctx, ThreadService_UpdateReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_DeleteReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) LikeThread(ctx context.Context, in *LikeThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_LikeThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) UnlikeThread(ctx context.Context, in *UnlikeThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_UnlikeThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) LikeReply(ctx context.Context, in *LikeReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_LikeReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) UnlikeReply(ctx context.Context, in *UnlikeReplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_UnlikeReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) RepostThread(ctx context.Context, in *RepostThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_RepostThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) RemoveRepost(ctx context.Context, in *RemoveRepostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_RemoveRepost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) BookmarkThread(ctx context.Context, in *BookmarkThreadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_BookmarkThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) RemoveBookmark(ctx context.Context, in *RemoveBookmarkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_RemoveBookmark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, ThreadService_CreatePoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) VotePoll(ctx context.Context, in *VotePollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ThreadService_VotePoll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetPollResults(ctx context.Context, in *GetPollResultsRequest, opts ...grpc.CallOption) (*PollResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PollResultsResponse)
	err := c.cc.Invoke(ctx, ThreadService_GetPollResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadServiceServer is the server API for ThreadService service.
// All implementations must embed UnimplementedThreadServiceServer
// for forward compatibility.
//
// ThreadService defines all the operations related to threads
type ThreadServiceServer interface {
	// Thread operations
	CreateThread(context.Context, *CreateThreadRequest) (*ThreadResponse, error)
	GetThreadById(context.Context, *GetThreadRequest) (*ThreadResponse, error)
	GetThreadsByUser(context.Context, *GetThreadsByUserRequest) (*ThreadsResponse, error)
	UpdateThread(context.Context, *UpdateThreadRequest) (*ThreadResponse, error)
	DeleteThread(context.Context, *DeleteThreadRequest) (*emptypb.Empty, error)
	// Reply operations
	CreateReply(context.Context, *CreateReplyRequest) (*ReplyResponse, error)
	GetRepliesByThread(context.Context, *GetRepliesByThreadRequest) (*RepliesResponse, error)
	UpdateReply(context.Context, *UpdateReplyRequest) (*ReplyResponse, error)
	DeleteReply(context.Context, *DeleteReplyRequest) (*emptypb.Empty, error)
	// Interaction operations
	LikeThread(context.Context, *LikeThreadRequest) (*emptypb.Empty, error)
	UnlikeThread(context.Context, *UnlikeThreadRequest) (*emptypb.Empty, error)
	LikeReply(context.Context, *LikeReplyRequest) (*emptypb.Empty, error)
	UnlikeReply(context.Context, *UnlikeReplyRequest) (*emptypb.Empty, error)
	RepostThread(context.Context, *RepostThreadRequest) (*emptypb.Empty, error)
	RemoveRepost(context.Context, *RemoveRepostRequest) (*emptypb.Empty, error)
	BookmarkThread(context.Context, *BookmarkThreadRequest) (*emptypb.Empty, error)
	RemoveBookmark(context.Context, *RemoveBookmarkRequest) (*emptypb.Empty, error)
	// Poll operations
	CreatePoll(context.Context, *CreatePollRequest) (*PollResponse, error)
	VotePoll(context.Context, *VotePollRequest) (*emptypb.Empty, error)
	GetPollResults(context.Context, *GetPollResultsRequest) (*PollResultsResponse, error)
	mustEmbedUnimplementedThreadServiceServer()
}

// UnimplementedThreadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThreadServiceServer struct{}

func (UnimplementedThreadServiceServer) CreateThread(context.Context, *CreateThreadRequest) (*ThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedThreadServiceServer) GetThreadById(context.Context, *GetThreadRequest) (*ThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadById not implemented")
}
func (UnimplementedThreadServiceServer) GetThreadsByUser(context.Context, *GetThreadsByUserRequest) (*ThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadsByUser not implemented")
}
func (UnimplementedThreadServiceServer) UpdateThread(context.Context, *UpdateThreadRequest) (*ThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThread not implemented")
}
func (UnimplementedThreadServiceServer) DeleteThread(context.Context, *DeleteThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedThreadServiceServer) CreateReply(context.Context, *CreateReplyRequest) (*ReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedThreadServiceServer) GetRepliesByThread(context.Context, *GetRepliesByThreadRequest) (*RepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepliesByThread not implemented")
}
func (UnimplementedThreadServiceServer) UpdateReply(context.Context, *UpdateReplyRequest) (*ReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReply not implemented")
}
func (UnimplementedThreadServiceServer) DeleteReply(context.Context, *DeleteReplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReply not implemented")
}
func (UnimplementedThreadServiceServer) LikeThread(context.Context, *LikeThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeThread not implemented")
}
func (UnimplementedThreadServiceServer) UnlikeThread(context.Context, *UnlikeThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeThread not implemented")
}
func (UnimplementedThreadServiceServer) LikeReply(context.Context, *LikeReplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeReply not implemented")
}
func (UnimplementedThreadServiceServer) UnlikeReply(context.Context, *UnlikeReplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeReply not implemented")
}
func (UnimplementedThreadServiceServer) RepostThread(context.Context, *RepostThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepostThread not implemented")
}
func (UnimplementedThreadServiceServer) RemoveRepost(context.Context, *RemoveRepostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRepost not implemented")
}
func (UnimplementedThreadServiceServer) BookmarkThread(context.Context, *BookmarkThreadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkThread not implemented")
}
func (UnimplementedThreadServiceServer) RemoveBookmark(context.Context, *RemoveBookmarkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBookmark not implemented")
}
func (UnimplementedThreadServiceServer) CreatePoll(context.Context, *CreatePollRequest) (*PollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedThreadServiceServer) VotePoll(context.Context, *VotePollRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoll not implemented")
}
func (UnimplementedThreadServiceServer) GetPollResults(context.Context, *GetPollResultsRequest) (*PollResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPollResults not implemented")
}
func (UnimplementedThreadServiceServer) mustEmbedUnimplementedThreadServiceServer() {}
func (UnimplementedThreadServiceServer) testEmbeddedByValue()                       {}

// UnsafeThreadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadServiceServer will
// result in compilation errors.
type UnsafeThreadServiceServer interface {
	mustEmbedUnimplementedThreadServiceServer()
}

func RegisterThreadServiceServer(s grpc.ServiceRegistrar, srv ThreadServiceServer) {
	// If the following call pancis, it indicates UnimplementedThreadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThreadService_ServiceDesc, srv)
}

func _ThreadService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetThreadById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetThreadById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetThreadById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetThreadById(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetThreadsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetThreadsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetThreadsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetThreadsByUser(ctx, req.(*GetThreadsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_UpdateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).UpdateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_UpdateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).UpdateThread(ctx, req.(*UpdateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_DeleteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_CreateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).CreateReply(ctx, req.(*CreateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetRepliesByThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepliesByThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetRepliesByThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetRepliesByThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetRepliesByThread(ctx, req.(*GetRepliesByThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_UpdateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).UpdateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_UpdateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).UpdateReply(ctx, req.(*UpdateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_DeleteReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).DeleteReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_DeleteReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).DeleteReply(ctx, req.(*DeleteReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_LikeThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).LikeThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_LikeThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).LikeThread(ctx, req.(*LikeThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_UnlikeThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).UnlikeThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_UnlikeThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).UnlikeThread(ctx, req.(*UnlikeThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_LikeReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).LikeReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_LikeReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).LikeReply(ctx, req.(*LikeReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_UnlikeReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).UnlikeReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_UnlikeReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).UnlikeReply(ctx, req.(*UnlikeReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_RepostThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepostThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).RepostThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_RepostThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).RepostThread(ctx, req.(*RepostThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_RemoveRepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRepostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).RemoveRepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_RemoveRepost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).RemoveRepost(ctx, req.(*RemoveRepostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_BookmarkThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).BookmarkThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_BookmarkThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).BookmarkThread(ctx, req.(*BookmarkThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_RemoveBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).RemoveBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_RemoveBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).RemoveBookmark(ctx, req.(*RemoveBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_CreatePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_VotePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).VotePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_VotePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).VotePoll(ctx, req.(*VotePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreadService_GetPollResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetPollResults(ctx, req.(*GetPollResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreadService_ServiceDesc is the grpc.ServiceDesc for ThreadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thread.ThreadService",
	HandlerType: (*ThreadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThread",
			Handler:    _ThreadService_CreateThread_Handler,
		},
		{
			MethodName: "GetThreadById",
			Handler:    _ThreadService_GetThreadById_Handler,
		},
		{
			MethodName: "GetThreadsByUser",
			Handler:    _ThreadService_GetThreadsByUser_Handler,
		},
		{
			MethodName: "UpdateThread",
			Handler:    _ThreadService_UpdateThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _ThreadService_DeleteThread_Handler,
		},
		{
			MethodName: "CreateReply",
			Handler:    _ThreadService_CreateReply_Handler,
		},
		{
			MethodName: "GetRepliesByThread",
			Handler:    _ThreadService_GetRepliesByThread_Handler,
		},
		{
			MethodName: "UpdateReply",
			Handler:    _ThreadService_UpdateReply_Handler,
		},
		{
			MethodName: "DeleteReply",
			Handler:    _ThreadService_DeleteReply_Handler,
		},
		{
			MethodName: "LikeThread",
			Handler:    _ThreadService_LikeThread_Handler,
		},
		{
			MethodName: "UnlikeThread",
			Handler:    _ThreadService_UnlikeThread_Handler,
		},
		{
			MethodName: "LikeReply",
			Handler:    _ThreadService_LikeReply_Handler,
		},
		{
			MethodName: "UnlikeReply",
			Handler:    _ThreadService_UnlikeReply_Handler,
		},
		{
			MethodName: "RepostThread",
			Handler:    _ThreadService_RepostThread_Handler,
		},
		{
			MethodName: "RemoveRepost",
			Handler:    _ThreadService_RemoveRepost_Handler,
		},
		{
			MethodName: "BookmarkThread",
			Handler:    _ThreadService_BookmarkThread_Handler,
		},
		{
			MethodName: "RemoveBookmark",
			Handler:    _ThreadService_RemoveBookmark_Handler,
		},
		{
			MethodName: "CreatePoll",
			Handler:    _ThreadService_CreatePoll_Handler,
		},
		{
			MethodName: "VotePoll",
			Handler:    _ThreadService_VotePoll_Handler,
		},
		{
			MethodName: "GetPollResults",
			Handler:    _ThreadService_GetPollResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/thread.proto",
}
