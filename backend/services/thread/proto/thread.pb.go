// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: proto/thread.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Thread message
type Thread struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content         string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Media           []*Media               `protobuf:"bytes,4,rep,name=media,proto3" json:"media,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ViewCount       int64                  `protobuf:"varint,7,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Poll            *Poll                  `protobuf:"bytes,8,opt,name=poll,proto3,oneof" json:"poll,omitempty"`
	CommunityId     *string                `protobuf:"bytes,9,opt,name=community_id,json=communityId,proto3,oneof" json:"community_id,omitempty"`
	IsPinned        *bool                  `protobuf:"varint,10,opt,name=is_pinned,json=isPinned,proto3,oneof" json:"is_pinned,omitempty"`
	WhoCanReply     *string                `protobuf:"bytes,11,opt,name=who_can_reply,json=whoCanReply,proto3,oneof" json:"who_can_reply,omitempty"`
	ScheduledAt     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=scheduled_at,json=scheduledAt,proto3,oneof" json:"scheduled_at,omitempty"`
	IsAdvertisement *bool                  `protobuf:"varint,13,opt,name=is_advertisement,json=isAdvertisement,proto3,oneof" json:"is_advertisement,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Thread) Reset() {
	*x = Thread{}
	mi := &file_proto_thread_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{0}
}

func (x *Thread) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Thread) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Thread) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Thread) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Thread) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Thread) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Thread) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Thread) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *Thread) GetCommunityId() string {
	if x != nil && x.CommunityId != nil {
		return *x.CommunityId
	}
	return ""
}

func (x *Thread) GetIsPinned() bool {
	if x != nil && x.IsPinned != nil {
		return *x.IsPinned
	}
	return false
}

func (x *Thread) GetWhoCanReply() string {
	if x != nil && x.WhoCanReply != nil {
		return *x.WhoCanReply
	}
	return ""
}

func (x *Thread) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *Thread) GetIsAdvertisement() bool {
	if x != nil && x.IsAdvertisement != nil {
		return *x.IsAdvertisement
	}
	return false
}

// Media message
type Media struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // "image", "video", etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Media) Reset() {
	*x = Media{}
	mi := &file_proto_thread_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{1}
}

func (x *Media) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Media) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Media) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// MediaResponse message
type MediaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaResponse) Reset() {
	*x = MediaResponse{}
	mi := &file_proto_thread_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaResponse) ProtoMessage() {}

func (x *MediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaResponse.ProtoReflect.Descriptor instead.
func (*MediaResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{2}
}

func (x *MediaResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MediaResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Poll message
type Poll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Question      string                 `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Options       []*PollOption          `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsAnonymous   bool                   `protobuf:"varint,5,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Poll) Reset() {
	*x = Poll{}
	mi := &file_proto_thread_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{3}
}

func (x *Poll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Poll) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Poll) GetOptions() []*PollOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Poll) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Poll) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

// PollInfo message
type PollInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Question      string                 `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Options       []string               `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsAnonymous   bool                   `protobuf:"varint,4,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollInfo) Reset() {
	*x = PollInfo{}
	mi := &file_proto_thread_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollInfo) ProtoMessage() {}

func (x *PollInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollInfo.ProtoReflect.Descriptor instead.
func (*PollInfo) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{4}
}

func (x *PollInfo) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollInfo) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PollInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PollInfo) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

// Poll option message
type PollOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollOption) Reset() {
	*x = PollOption{}
	mi := &file_proto_thread_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollOption) ProtoMessage() {}

func (x *PollOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollOption.ProtoReflect.Descriptor instead.
func (*PollOption) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{5}
}

func (x *PollOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Reply message
type Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadId      string                 `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Media         []*Media               `protobuf:"bytes,5,rep,name=media,proto3" json:"media,omitempty"`
	ParentId      string                 `protobuf:"bytes,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // Optional, for replies to replies
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsPinned      *bool                  `protobuf:"varint,9,opt,name=is_pinned,json=isPinned,proto3,oneof" json:"is_pinned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_proto_thread_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{6}
}

func (x *Reply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reply) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Reply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Reply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Reply) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Reply) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Reply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Reply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Reply) GetIsPinned() bool {
	if x != nil && x.IsPinned != nil {
		return *x.IsPinned
	}
	return false
}

// CreateThreadRequest message
type CreateThreadRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content          string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Media            []*Media               `protobuf:"bytes,3,rep,name=media,proto3" json:"media,omitempty"`
	Poll             *PollRequest           `protobuf:"bytes,4,opt,name=poll,proto3,oneof" json:"poll,omitempty"`
	CommunityId      *string                `protobuf:"bytes,5,opt,name=community_id,json=communityId,proto3,oneof" json:"community_id,omitempty"`
	ScheduledAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_at,json=scheduledAt,proto3,oneof" json:"scheduled_at,omitempty"`
	WhoCanReply      *string                `protobuf:"bytes,7,opt,name=who_can_reply,json=whoCanReply,proto3,oneof" json:"who_can_reply,omitempty"`
	IsAdvertisement  *bool                  `protobuf:"varint,8,opt,name=is_advertisement,json=isAdvertisement,proto3,oneof" json:"is_advertisement,omitempty"`
	Hashtags         []string               `protobuf:"bytes,9,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	MentionedUserIds []string               `protobuf:"bytes,10,rep,name=mentioned_user_ids,json=mentionedUserIds,proto3" json:"mentioned_user_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateThreadRequest) Reset() {
	*x = CreateThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadRequest) ProtoMessage() {}

func (x *CreateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{7}
}

func (x *CreateThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateThreadRequest) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *CreateThreadRequest) GetPoll() *PollRequest {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *CreateThreadRequest) GetCommunityId() string {
	if x != nil && x.CommunityId != nil {
		return *x.CommunityId
	}
	return ""
}

func (x *CreateThreadRequest) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *CreateThreadRequest) GetWhoCanReply() string {
	if x != nil && x.WhoCanReply != nil {
		return *x.WhoCanReply
	}
	return ""
}

func (x *CreateThreadRequest) GetIsAdvertisement() bool {
	if x != nil && x.IsAdvertisement != nil {
		return *x.IsAdvertisement
	}
	return false
}

func (x *CreateThreadRequest) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *CreateThreadRequest) GetMentionedUserIds() []string {
	if x != nil {
		return x.MentionedUserIds
	}
	return nil
}

// PollRequest message for creating polls
type PollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Question      string                 `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Options       []string               `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsAnonymous   bool                   `protobuf:"varint,4,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollRequest) Reset() {
	*x = PollRequest{}
	mi := &file_proto_thread_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollRequest) ProtoMessage() {}

func (x *PollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollRequest.ProtoReflect.Descriptor instead.
func (*PollRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{8}
}

func (x *PollRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollRequest) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PollRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PollRequest) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

// GetThreadRequest message
type GetThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadRequest) Reset() {
	*x = GetThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadRequest) ProtoMessage() {}

func (x *GetThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadRequest.ProtoReflect.Descriptor instead.
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{9}
}

func (x *GetThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

// GetThreadsByUserRequest message
type GetThreadsByUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadsByUserRequest) Reset() {
	*x = GetThreadsByUserRequest{}
	mi := &file_proto_thread_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadsByUserRequest) ProtoMessage() {}

func (x *GetThreadsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadsByUserRequest.ProtoReflect.Descriptor instead.
func (*GetThreadsByUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{10}
}

func (x *GetThreadsByUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetThreadsByUserRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetThreadsByUserRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// GetAllThreadsRequest message
type GetAllThreadsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllThreadsRequest) Reset() {
	*x = GetAllThreadsRequest{}
	mi := &file_proto_thread_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllThreadsRequest) ProtoMessage() {}

func (x *GetAllThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllThreadsRequest.ProtoReflect.Descriptor instead.
func (*GetAllThreadsRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllThreadsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllThreadsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// UpdateThreadRequest message
type UpdateThreadRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ThreadId            string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId              string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content             string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Media               []*Media               `protobuf:"bytes,4,rep,name=media,proto3" json:"media,omitempty"`
	IsPinned            *bool                  `protobuf:"varint,5,opt,name=is_pinned,json=isPinned,proto3,oneof" json:"is_pinned,omitempty"`
	AddCategoryNames    []string               `protobuf:"bytes,6,rep,name=add_category_names,json=addCategoryNames,proto3" json:"add_category_names,omitempty"`
	RemoveCategoryNames []string               `protobuf:"bytes,7,rep,name=remove_category_names,json=removeCategoryNames,proto3" json:"remove_category_names,omitempty"`
	AddHashtags         []string               `protobuf:"bytes,8,rep,name=add_hashtags,json=addHashtags,proto3" json:"add_hashtags,omitempty"`
	RemoveHashtags      []string               `protobuf:"bytes,9,rep,name=remove_hashtags,json=removeHashtags,proto3" json:"remove_hashtags,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateThreadRequest) Reset() {
	*x = UpdateThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThreadRequest) ProtoMessage() {}

func (x *UpdateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThreadRequest.ProtoReflect.Descriptor instead.
func (*UpdateThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *UpdateThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateThreadRequest) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *UpdateThreadRequest) GetIsPinned() bool {
	if x != nil && x.IsPinned != nil {
		return *x.IsPinned
	}
	return false
}

func (x *UpdateThreadRequest) GetAddCategoryNames() []string {
	if x != nil {
		return x.AddCategoryNames
	}
	return nil
}

func (x *UpdateThreadRequest) GetRemoveCategoryNames() []string {
	if x != nil {
		return x.RemoveCategoryNames
	}
	return nil
}

func (x *UpdateThreadRequest) GetAddHashtags() []string {
	if x != nil {
		return x.AddHashtags
	}
	return nil
}

func (x *UpdateThreadRequest) GetRemoveHashtags() []string {
	if x != nil {
		return x.RemoveHashtags
	}
	return nil
}

// DeleteThreadRequest message
type DeleteThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteThreadRequest) Reset() {
	*x = DeleteThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadRequest) ProtoMessage() {}

func (x *DeleteThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *DeleteThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// CreateReplyRequest message
type CreateReplyRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ThreadId         string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId           string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content          string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Media            []*Media               `protobuf:"bytes,4,rep,name=media,proto3" json:"media,omitempty"`
	ParentId         string                 `protobuf:"bytes,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // Optional, for replies to replies
	ParentReplyId    *string                `protobuf:"bytes,6,opt,name=parent_reply_id,json=parentReplyId,proto3,oneof" json:"parent_reply_id,omitempty"`
	MentionedUserIds []string               `protobuf:"bytes,7,rep,name=mentioned_user_ids,json=mentionedUserIds,proto3" json:"mentioned_user_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateReplyRequest) Reset() {
	*x = CreateReplyRequest{}
	mi := &file_proto_thread_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplyRequest) ProtoMessage() {}

func (x *CreateReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplyRequest.ProtoReflect.Descriptor instead.
func (*CreateReplyRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{14}
}

func (x *CreateReplyRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreateReplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReplyRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateReplyRequest) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *CreateReplyRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateReplyRequest) GetParentReplyId() string {
	if x != nil && x.ParentReplyId != nil {
		return *x.ParentReplyId
	}
	return ""
}

func (x *CreateReplyRequest) GetMentionedUserIds() []string {
	if x != nil {
		return x.MentionedUserIds
	}
	return nil
}

// GetRepliesByThreadRequest message
type GetRepliesByThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRepliesByThreadRequest) Reset() {
	*x = GetRepliesByThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRepliesByThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepliesByThreadRequest) ProtoMessage() {}

func (x *GetRepliesByThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepliesByThreadRequest.ProtoReflect.Descriptor instead.
func (*GetRepliesByThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{15}
}

func (x *GetRepliesByThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *GetRepliesByThreadRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRepliesByThreadRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// UpdateReplyRequest message
type UpdateReplyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplyId       string                 `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Media         []*Media               `protobuf:"bytes,4,rep,name=media,proto3" json:"media,omitempty"`
	IsPinned      *bool                  `protobuf:"varint,5,opt,name=is_pinned,json=isPinned,proto3,oneof" json:"is_pinned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReplyRequest) Reset() {
	*x = UpdateReplyRequest{}
	mi := &file_proto_thread_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReplyRequest) ProtoMessage() {}

func (x *UpdateReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReplyRequest.ProtoReflect.Descriptor instead.
func (*UpdateReplyRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateReplyRequest) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *UpdateReplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateReplyRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateReplyRequest) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *UpdateReplyRequest) GetIsPinned() bool {
	if x != nil && x.IsPinned != nil {
		return *x.IsPinned
	}
	return false
}

// DeleteReplyRequest message
type DeleteReplyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplyId       string                 `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReplyRequest) Reset() {
	*x = DeleteReplyRequest{}
	mi := &file_proto_thread_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplyRequest) ProtoMessage() {}

func (x *DeleteReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplyRequest.ProtoReflect.Descriptor instead.
func (*DeleteReplyRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteReplyRequest) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *DeleteReplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// LikeThreadRequest message
type LikeThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikeThreadRequest) Reset() {
	*x = LikeThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeThreadRequest) ProtoMessage() {}

func (x *LikeThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeThreadRequest.ProtoReflect.Descriptor instead.
func (*LikeThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{18}
}

func (x *LikeThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *LikeThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// UnlikeThreadRequest message
type UnlikeThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlikeThreadRequest) Reset() {
	*x = UnlikeThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlikeThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlikeThreadRequest) ProtoMessage() {}

func (x *UnlikeThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlikeThreadRequest.ProtoReflect.Descriptor instead.
func (*UnlikeThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{19}
}

func (x *UnlikeThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *UnlikeThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// LikeReplyRequest message
type LikeReplyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplyId       string                 `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikeReplyRequest) Reset() {
	*x = LikeReplyRequest{}
	mi := &file_proto_thread_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeReplyRequest) ProtoMessage() {}

func (x *LikeReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeReplyRequest.ProtoReflect.Descriptor instead.
func (*LikeReplyRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{20}
}

func (x *LikeReplyRequest) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *LikeReplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// UnlikeReplyRequest message
type UnlikeReplyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplyId       string                 `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlikeReplyRequest) Reset() {
	*x = UnlikeReplyRequest{}
	mi := &file_proto_thread_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlikeReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlikeReplyRequest) ProtoMessage() {}

func (x *UnlikeReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlikeReplyRequest.ProtoReflect.Descriptor instead.
func (*UnlikeReplyRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{21}
}

func (x *UnlikeReplyRequest) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *UnlikeReplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// RepostThreadRequest message
type RepostThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // Optional content to add to the repost
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepostThreadRequest) Reset() {
	*x = RepostThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepostThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepostThreadRequest) ProtoMessage() {}

func (x *RepostThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepostThreadRequest.ProtoReflect.Descriptor instead.
func (*RepostThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{22}
}

func (x *RepostThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *RepostThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RepostThreadRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// RemoveRepostRequest message
type RemoveRepostRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepostId      string                 `protobuf:"bytes,1,opt,name=repost_id,json=repostId,proto3" json:"repost_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRepostRequest) Reset() {
	*x = RemoveRepostRequest{}
	mi := &file_proto_thread_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRepostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRepostRequest) ProtoMessage() {}

func (x *RemoveRepostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRepostRequest.ProtoReflect.Descriptor instead.
func (*RemoveRepostRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveRepostRequest) GetRepostId() string {
	if x != nil {
		return x.RepostId
	}
	return ""
}

func (x *RemoveRepostRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// BookmarkThreadRequest message
type BookmarkThreadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BookmarkThreadRequest) Reset() {
	*x = BookmarkThreadRequest{}
	mi := &file_proto_thread_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookmarkThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkThreadRequest) ProtoMessage() {}

func (x *BookmarkThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkThreadRequest.ProtoReflect.Descriptor instead.
func (*BookmarkThreadRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{24}
}

func (x *BookmarkThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *BookmarkThreadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// RemoveBookmarkRequest message
type RemoveBookmarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveBookmarkRequest) Reset() {
	*x = RemoveBookmarkRequest{}
	mi := &file_proto_thread_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBookmarkRequest) ProtoMessage() {}

func (x *RemoveBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBookmarkRequest.ProtoReflect.Descriptor instead.
func (*RemoveBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{25}
}

func (x *RemoveBookmarkRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *RemoveBookmarkRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// CreatePollRequest message
type CreatePollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadId      string                 `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Poll          *PollRequest           `protobuf:"bytes,3,opt,name=poll,proto3" json:"poll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePollRequest) Reset() {
	*x = CreatePollRequest{}
	mi := &file_proto_thread_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollRequest) ProtoMessage() {}

func (x *CreatePollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollRequest.ProtoReflect.Descriptor instead.
func (*CreatePollRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{26}
}

func (x *CreatePollRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreatePollRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePollRequest) GetPoll() *PollRequest {
	if x != nil {
		return x.Poll
	}
	return nil
}

// VotePollRequest message
type VotePollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PollId        string                 `protobuf:"bytes,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	OptionId      string                 `protobuf:"bytes,2,opt,name=option_id,json=optionId,proto3" json:"option_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VotePollRequest) Reset() {
	*x = VotePollRequest{}
	mi := &file_proto_thread_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotePollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotePollRequest) ProtoMessage() {}

func (x *VotePollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotePollRequest.ProtoReflect.Descriptor instead.
func (*VotePollRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{27}
}

func (x *VotePollRequest) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

func (x *VotePollRequest) GetOptionId() string {
	if x != nil {
		return x.OptionId
	}
	return ""
}

func (x *VotePollRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetPollResultsRequest message
type GetPollResultsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PollId        string                 `protobuf:"bytes,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPollResultsRequest) Reset() {
	*x = GetPollResultsRequest{}
	mi := &file_proto_thread_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPollResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPollResultsRequest) ProtoMessage() {}

func (x *GetPollResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPollResultsRequest.ProtoReflect.Descriptor instead.
func (*GetPollResultsRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{28}
}

func (x *GetPollResultsRequest) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

// ThreadResponse message
type ThreadResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadId        string                 `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content         string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Media           []*MediaResponse       `protobuf:"bytes,5,rep,name=media,proto3" json:"media,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ReplyCount      int64                  `protobuf:"varint,8,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	LikeCount       int64                  `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	RepostCount     int64                  `protobuf:"varint,10,opt,name=repost_count,json=repostCount,proto3" json:"repost_count,omitempty"`
	ViewCount       int64                  `protobuf:"varint,11,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Poll            *Poll                  `protobuf:"bytes,12,opt,name=poll,proto3,oneof" json:"poll,omitempty"`
	ParentThreadId  *string                `protobuf:"bytes,13,opt,name=parent_thread_id,json=parentThreadId,proto3,oneof" json:"parent_thread_id,omitempty"` // For reposts
	IsRepost        *bool                  `protobuf:"varint,14,opt,name=is_repost,json=isRepost,proto3,oneof" json:"is_repost,omitempty"`
	IsLiked         *bool                  `protobuf:"varint,15,opt,name=is_liked,json=isLiked,proto3,oneof" json:"is_liked,omitempty"`
	IsBookmarked    *bool                  `protobuf:"varint,16,opt,name=is_bookmarked,json=isBookmarked,proto3,oneof" json:"is_bookmarked,omitempty"`
	IsPinned        *bool                  `protobuf:"varint,17,opt,name=is_pinned,json=isPinned,proto3,oneof" json:"is_pinned,omitempty"`
	WhoCanReply     *string                `protobuf:"bytes,18,opt,name=who_can_reply,json=whoCanReply,proto3,oneof" json:"who_can_reply,omitempty"`
	ScheduledAt     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=scheduled_at,json=scheduledAt,proto3,oneof" json:"scheduled_at,omitempty"`
	CommunityId     *string                `protobuf:"bytes,20,opt,name=community_id,json=communityId,proto3,oneof" json:"community_id,omitempty"`
	IsAdvertisement *bool                  `protobuf:"varint,21,opt,name=is_advertisement,json=isAdvertisement,proto3,oneof" json:"is_advertisement,omitempty"`
	User            *User                  `protobuf:"bytes,22,opt,name=user,proto3,oneof" json:"user,omitempty"` // User information
	BookmarkCount   int64                  `protobuf:"varint,23,opt,name=bookmark_count,json=bookmarkCount,proto3" json:"bookmark_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ThreadResponse) Reset() {
	*x = ThreadResponse{}
	mi := &file_proto_thread_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadResponse) ProtoMessage() {}

func (x *ThreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadResponse.ProtoReflect.Descriptor instead.
func (*ThreadResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{29}
}

func (x *ThreadResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThreadResponse) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ThreadResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ThreadResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ThreadResponse) GetMedia() []*MediaResponse {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ThreadResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ThreadResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ThreadResponse) GetReplyCount() int64 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *ThreadResponse) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *ThreadResponse) GetRepostCount() int64 {
	if x != nil {
		return x.RepostCount
	}
	return 0
}

func (x *ThreadResponse) GetViewCount() int64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *ThreadResponse) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *ThreadResponse) GetParentThreadId() string {
	if x != nil && x.ParentThreadId != nil {
		return *x.ParentThreadId
	}
	return ""
}

func (x *ThreadResponse) GetIsRepost() bool {
	if x != nil && x.IsRepost != nil {
		return *x.IsRepost
	}
	return false
}

func (x *ThreadResponse) GetIsLiked() bool {
	if x != nil && x.IsLiked != nil {
		return *x.IsLiked
	}
	return false
}

func (x *ThreadResponse) GetIsBookmarked() bool {
	if x != nil && x.IsBookmarked != nil {
		return *x.IsBookmarked
	}
	return false
}

func (x *ThreadResponse) GetIsPinned() bool {
	if x != nil && x.IsPinned != nil {
		return *x.IsPinned
	}
	return false
}

func (x *ThreadResponse) GetWhoCanReply() string {
	if x != nil && x.WhoCanReply != nil {
		return *x.WhoCanReply
	}
	return ""
}

func (x *ThreadResponse) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *ThreadResponse) GetCommunityId() string {
	if x != nil && x.CommunityId != nil {
		return *x.CommunityId
	}
	return ""
}

func (x *ThreadResponse) GetIsAdvertisement() bool {
	if x != nil && x.IsAdvertisement != nil {
		return *x.IsAdvertisement
	}
	return false
}

func (x *ThreadResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ThreadResponse) GetBookmarkCount() int64 {
	if x != nil {
		return x.BookmarkCount
	}
	return 0
}

// ThreadsResponse message
type ThreadsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Threads       []*ThreadResponse      `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreadsResponse) Reset() {
	*x = ThreadsResponse{}
	mi := &file_proto_thread_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadsResponse) ProtoMessage() {}

func (x *ThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadsResponse.ProtoReflect.Descriptor instead.
func (*ThreadsResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{30}
}

func (x *ThreadsResponse) GetThreads() []*ThreadResponse {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *ThreadsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ThreadsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ThreadsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// ReplyResponse message
type ReplyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadId      string                 `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Media         []*Media               `protobuf:"bytes,5,rep,name=media,proto3" json:"media,omitempty"`
	ParentId      string                 `protobuf:"bytes,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // Optional, for replies to replies
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LikeCount     int64                  `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ReplyCount    int64                  `protobuf:"varint,10,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	IsLiked       *bool                  `protobuf:"varint,11,opt,name=is_liked,json=isLiked,proto3,oneof" json:"is_liked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplyResponse) Reset() {
	*x = ReplyResponse{}
	mi := &file_proto_thread_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyResponse) ProtoMessage() {}

func (x *ReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyResponse.ProtoReflect.Descriptor instead.
func (*ReplyResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{31}
}

func (x *ReplyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplyResponse) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ReplyResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReplyResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReplyResponse) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReplyResponse) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ReplyResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReplyResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReplyResponse) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *ReplyResponse) GetReplyCount() int64 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *ReplyResponse) GetIsLiked() bool {
	if x != nil && x.IsLiked != nil {
		return *x.IsLiked
	}
	return false
}

// RepliesResponse message
type RepliesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replies       []*ReplyResponse       `protobuf:"bytes,1,rep,name=replies,proto3" json:"replies,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepliesResponse) Reset() {
	*x = RepliesResponse{}
	mi := &file_proto_thread_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepliesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepliesResponse) ProtoMessage() {}

func (x *RepliesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepliesResponse.ProtoReflect.Descriptor instead.
func (*RepliesResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{32}
}

func (x *RepliesResponse) GetReplies() []*ReplyResponse {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *RepliesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RepliesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RepliesResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// PollResponse message
type PollResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadId      string                 `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Question      string                 `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Options       []*PollOption          `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsAnonymous   bool                   `protobuf:"varint,6,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	VotedOptionId *string                `protobuf:"bytes,7,opt,name=voted_option_id,json=votedOptionId,proto3,oneof" json:"voted_option_id,omitempty"` // The option the requesting user voted for, if any
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollResponse) Reset() {
	*x = PollResponse{}
	mi := &file_proto_thread_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponse) ProtoMessage() {}

func (x *PollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponse.ProtoReflect.Descriptor instead.
func (*PollResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{33}
}

func (x *PollResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollResponse) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *PollResponse) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollResponse) GetOptions() []*PollOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PollResponse) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PollResponse) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *PollResponse) GetVotedOptionId() string {
	if x != nil && x.VotedOptionId != nil {
		return *x.VotedOptionId
	}
	return ""
}

// PollResultsResponse message
type PollResultsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Question      string                 `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Results       []*PollOptionResult    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	TotalVotes    int64                  `protobuf:"varint,4,opt,name=total_votes,json=totalVotes,proto3" json:"total_votes,omitempty"`
	IsEnded       bool                   `protobuf:"varint,5,opt,name=is_ended,json=isEnded,proto3" json:"is_ended,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollResultsResponse) Reset() {
	*x = PollResultsResponse{}
	mi := &file_proto_thread_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResultsResponse) ProtoMessage() {}

func (x *PollResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResultsResponse.ProtoReflect.Descriptor instead.
func (*PollResultsResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{34}
}

func (x *PollResultsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollResultsResponse) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollResultsResponse) GetResults() []*PollOptionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PollResultsResponse) GetTotalVotes() int64 {
	if x != nil {
		return x.TotalVotes
	}
	return 0
}

func (x *PollResultsResponse) GetIsEnded() bool {
	if x != nil {
		return x.IsEnded
	}
	return false
}

// PollOptionResult message
type PollOptionResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	VoteCount     int64                  `protobuf:"varint,3,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	Percentage    float64                `protobuf:"fixed64,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollOptionResult) Reset() {
	*x = PollOptionResult{}
	mi := &file_proto_thread_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollOptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollOptionResult) ProtoMessage() {}

func (x *PollOptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollOptionResult.ProtoReflect.Descriptor instead.
func (*PollOptionResult) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{35}
}

func (x *PollOptionResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollOptionResult) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PollOptionResult) GetVoteCount() int64 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *PollOptionResult) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// User message represents user information within thread responses
type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Email         string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl     string                 `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Bio           string                 `protobuf:"bytes,6,opt,name=bio,proto3" json:"bio,omitempty"`
	IsVerified    bool                   `protobuf:"varint,7,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_proto_thread_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{36}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

// Define HashtagResponse for trending hashtags
type HashtagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ThreadCount   int64                  `protobuf:"varint,3,opt,name=thread_count,json=threadCount,proto3" json:"thread_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashtagResponse) Reset() {
	*x = HashtagResponse{}
	mi := &file_proto_thread_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashtagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashtagResponse) ProtoMessage() {}

func (x *HashtagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashtagResponse.ProtoReflect.Descriptor instead.
func (*HashtagResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{37}
}

func (x *HashtagResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HashtagResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *HashtagResponse) GetThreadCount() int64 {
	if x != nil {
		return x.ThreadCount
	}
	return 0
}

// Define request and response for trending hashtags
type GetTrendingHashtagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrendingHashtagsRequest) Reset() {
	*x = GetTrendingHashtagsRequest{}
	mi := &file_proto_thread_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrendingHashtagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrendingHashtagsRequest) ProtoMessage() {}

func (x *GetTrendingHashtagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrendingHashtagsRequest.ProtoReflect.Descriptor instead.
func (*GetTrendingHashtagsRequest) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{38}
}

func (x *GetTrendingHashtagsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTrendingHashtagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hashtags      []*HashtagResponse     `protobuf:"bytes,1,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrendingHashtagsResponse) Reset() {
	*x = GetTrendingHashtagsResponse{}
	mi := &file_proto_thread_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrendingHashtagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrendingHashtagsResponse) ProtoMessage() {}

func (x *GetTrendingHashtagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_thread_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrendingHashtagsResponse.ProtoReflect.Descriptor instead.
func (*GetTrendingHashtagsResponse) Descriptor() ([]byte, []int) {
	return file_proto_thread_proto_rawDescGZIP(), []int{39}
}

func (x *GetTrendingHashtagsResponse) GetHashtags() []*HashtagResponse {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

var File_proto_thread_proto protoreflect.FileDescriptor

const file_proto_thread_proto_rawDesc = "" +
	"\n" +
	"\x12proto/thread.proto\x12\x06thread\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xf3\x04\n" +
	"\x06Thread\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x04 \x03(\v2\r.thread.MediaR\x05media\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1d\n" +
	"\n" +
	"view_count\x18\a \x01(\x03R\tviewCount\x12%\n" +
	"\x04poll\x18\b \x01(\v2\f.thread.PollH\x00R\x04poll\x88\x01\x01\x12&\n" +
	"\fcommunity_id\x18\t \x01(\tH\x01R\vcommunityId\x88\x01\x01\x12 \n" +
	"\tis_pinned\x18\n" +
	" \x01(\bH\x02R\bisPinned\x88\x01\x01\x12'\n" +
	"\rwho_can_reply\x18\v \x01(\tH\x03R\vwhoCanReply\x88\x01\x01\x12B\n" +
	"\fscheduled_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampH\x04R\vscheduledAt\x88\x01\x01\x12.\n" +
	"\x10is_advertisement\x18\r \x01(\bH\x05R\x0fisAdvertisement\x88\x01\x01B\a\n" +
	"\x05_pollB\x0f\n" +
	"\r_community_idB\f\n" +
	"\n" +
	"_is_pinnedB\x10\n" +
	"\x0e_who_can_replyB\x0f\n" +
	"\r_scheduled_atB\x13\n" +
	"\x11_is_advertisement\"=\n" +
	"\x05Media\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\"E\n" +
	"\rMediaResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\"\xba\x01\n" +
	"\x04Poll\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bquestion\x18\x02 \x01(\tR\bquestion\x12,\n" +
	"\aoptions\x18\x03 \x03(\v2\x12.thread.PollOptionR\aoptions\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12!\n" +
	"\fis_anonymous\x18\x05 \x01(\bR\visAnonymous\"\x9a\x01\n" +
	"\bPollInfo\x12\x1a\n" +
	"\bquestion\x18\x01 \x01(\tR\bquestion\x12\x18\n" +
	"\aoptions\x18\x02 \x03(\tR\aoptions\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12!\n" +
	"\fis_anonymous\x18\x04 \x01(\bR\visAnonymous\"0\n" +
	"\n" +
	"PollOption\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"\xcf\x02\n" +
	"\x05Reply\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tthread_id\x18\x02 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x05 \x03(\v2\r.thread.MediaR\x05media\x12\x1b\n" +
	"\tparent_id\x18\x06 \x01(\tR\bparentId\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12 \n" +
	"\tis_pinned\x18\t \x01(\bH\x00R\bisPinned\x88\x01\x01B\f\n" +
	"\n" +
	"_is_pinned\"\xfc\x03\n" +
	"\x13CreateThreadRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x03 \x03(\v2\r.thread.MediaR\x05media\x12,\n" +
	"\x04poll\x18\x04 \x01(\v2\x13.thread.PollRequestH\x00R\x04poll\x88\x01\x01\x12&\n" +
	"\fcommunity_id\x18\x05 \x01(\tH\x01R\vcommunityId\x88\x01\x01\x12B\n" +
	"\fscheduled_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampH\x02R\vscheduledAt\x88\x01\x01\x12'\n" +
	"\rwho_can_reply\x18\a \x01(\tH\x03R\vwhoCanReply\x88\x01\x01\x12.\n" +
	"\x10is_advertisement\x18\b \x01(\bH\x04R\x0fisAdvertisement\x88\x01\x01\x12\x1a\n" +
	"\bhashtags\x18\t \x03(\tR\bhashtags\x12,\n" +
	"\x12mentioned_user_ids\x18\n" +
	" \x03(\tR\x10mentionedUserIdsB\a\n" +
	"\x05_pollB\x0f\n" +
	"\r_community_idB\x0f\n" +
	"\r_scheduled_atB\x10\n" +
	"\x0e_who_can_replyB\x13\n" +
	"\x11_is_advertisement\"\x9d\x01\n" +
	"\vPollRequest\x12\x1a\n" +
	"\bquestion\x18\x01 \x01(\tR\bquestion\x12\x18\n" +
	"\aoptions\x18\x02 \x03(\tR\aoptions\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12!\n" +
	"\fis_anonymous\x18\x04 \x01(\bR\visAnonymous\"/\n" +
	"\x10GetThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\"\\\n" +
	"\x17GetThreadsByUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"@\n" +
	"\x14GetAllThreadsRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"\xe8\x02\n" +
	"\x13UpdateThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x04 \x03(\v2\r.thread.MediaR\x05media\x12 \n" +
	"\tis_pinned\x18\x05 \x01(\bH\x00R\bisPinned\x88\x01\x01\x12,\n" +
	"\x12add_category_names\x18\x06 \x03(\tR\x10addCategoryNames\x122\n" +
	"\x15remove_category_names\x18\a \x03(\tR\x13removeCategoryNames\x12!\n" +
	"\fadd_hashtags\x18\b \x03(\tR\vaddHashtags\x12'\n" +
	"\x0fremove_hashtags\x18\t \x03(\tR\x0eremoveHashtagsB\f\n" +
	"\n" +
	"_is_pinned\"K\n" +
	"\x13DeleteThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"\x95\x02\n" +
	"\x12CreateReplyRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x04 \x03(\v2\r.thread.MediaR\x05media\x12\x1b\n" +
	"\tparent_id\x18\x05 \x01(\tR\bparentId\x12+\n" +
	"\x0fparent_reply_id\x18\x06 \x01(\tH\x00R\rparentReplyId\x88\x01\x01\x12,\n" +
	"\x12mentioned_user_ids\x18\a \x03(\tR\x10mentionedUserIdsB\x12\n" +
	"\x10_parent_reply_id\"b\n" +
	"\x19GetRepliesByThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"\xb7\x01\n" +
	"\x12UpdateReplyRequest\x12\x19\n" +
	"\breply_id\x18\x01 \x01(\tR\areplyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x04 \x03(\v2\r.thread.MediaR\x05media\x12 \n" +
	"\tis_pinned\x18\x05 \x01(\bH\x00R\bisPinned\x88\x01\x01B\f\n" +
	"\n" +
	"_is_pinned\"H\n" +
	"\x12DeleteReplyRequest\x12\x19\n" +
	"\breply_id\x18\x01 \x01(\tR\areplyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"I\n" +
	"\x11LikeThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"K\n" +
	"\x13UnlikeThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"F\n" +
	"\x10LikeReplyRequest\x12\x19\n" +
	"\breply_id\x18\x01 \x01(\tR\areplyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"H\n" +
	"\x12UnlikeReplyRequest\x12\x19\n" +
	"\breply_id\x18\x01 \x01(\tR\areplyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"e\n" +
	"\x13RepostThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\"K\n" +
	"\x13RemoveRepostRequest\x12\x1b\n" +
	"\trepost_id\x18\x01 \x01(\tR\brepostId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"M\n" +
	"\x15BookmarkThreadRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"M\n" +
	"\x15RemoveBookmarkRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"r\n" +
	"\x11CreatePollRequest\x12\x1b\n" +
	"\tthread_id\x18\x01 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12'\n" +
	"\x04poll\x18\x03 \x01(\v2\x13.thread.PollRequestR\x04poll\"`\n" +
	"\x0fVotePollRequest\x12\x17\n" +
	"\apoll_id\x18\x01 \x01(\tR\x06pollId\x12\x1b\n" +
	"\toption_id\x18\x02 \x01(\tR\boptionId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\"0\n" +
	"\x15GetPollResultsRequest\x12\x17\n" +
	"\apoll_id\x18\x01 \x01(\tR\x06pollId\"\xb7\b\n" +
	"\x0eThreadResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tthread_id\x18\x02 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12+\n" +
	"\x05media\x18\x05 \x03(\v2\x15.thread.MediaResponseR\x05media\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1f\n" +
	"\vreply_count\x18\b \x01(\x03R\n" +
	"replyCount\x12\x1d\n" +
	"\n" +
	"like_count\x18\t \x01(\x03R\tlikeCount\x12!\n" +
	"\frepost_count\x18\n" +
	" \x01(\x03R\vrepostCount\x12\x1d\n" +
	"\n" +
	"view_count\x18\v \x01(\x03R\tviewCount\x12%\n" +
	"\x04poll\x18\f \x01(\v2\f.thread.PollH\x00R\x04poll\x88\x01\x01\x12-\n" +
	"\x10parent_thread_id\x18\r \x01(\tH\x01R\x0eparentThreadId\x88\x01\x01\x12 \n" +
	"\tis_repost\x18\x0e \x01(\bH\x02R\bisRepost\x88\x01\x01\x12\x1e\n" +
	"\bis_liked\x18\x0f \x01(\bH\x03R\aisLiked\x88\x01\x01\x12(\n" +
	"\ris_bookmarked\x18\x10 \x01(\bH\x04R\fisBookmarked\x88\x01\x01\x12 \n" +
	"\tis_pinned\x18\x11 \x01(\bH\x05R\bisPinned\x88\x01\x01\x12'\n" +
	"\rwho_can_reply\x18\x12 \x01(\tH\x06R\vwhoCanReply\x88\x01\x01\x12B\n" +
	"\fscheduled_at\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampH\aR\vscheduledAt\x88\x01\x01\x12&\n" +
	"\fcommunity_id\x18\x14 \x01(\tH\bR\vcommunityId\x88\x01\x01\x12.\n" +
	"\x10is_advertisement\x18\x15 \x01(\bH\tR\x0fisAdvertisement\x88\x01\x01\x12%\n" +
	"\x04user\x18\x16 \x01(\v2\f.thread.UserH\n" +
	"R\x04user\x88\x01\x01\x12%\n" +
	"\x0ebookmark_count\x18\x17 \x01(\x03R\rbookmarkCountB\a\n" +
	"\x05_pollB\x13\n" +
	"\x11_parent_thread_idB\f\n" +
	"\n" +
	"_is_repostB\v\n" +
	"\t_is_likedB\x10\n" +
	"\x0e_is_bookmarkedB\f\n" +
	"\n" +
	"_is_pinnedB\x10\n" +
	"\x0e_who_can_replyB\x0f\n" +
	"\r_scheduled_atB\x0f\n" +
	"\r_community_idB\x13\n" +
	"\x11_is_advertisementB\a\n" +
	"\x05_user\"\x8e\x01\n" +
	"\x0fThreadsResponse\x120\n" +
	"\athreads\x18\x01 \x03(\v2\x16.thread.ThreadResponseR\athreads\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"\x94\x03\n" +
	"\rReplyResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tthread_id\x18\x02 \x01(\tR\bthreadId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12#\n" +
	"\x05media\x18\x05 \x03(\v2\r.thread.MediaR\x05media\x12\x1b\n" +
	"\tparent_id\x18\x06 \x01(\tR\bparentId\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1d\n" +
	"\n" +
	"like_count\x18\t \x01(\x03R\tlikeCount\x12\x1f\n" +
	"\vreply_count\x18\n" +
	" \x01(\x03R\n" +
	"replyCount\x12\x1e\n" +
	"\bis_liked\x18\v \x01(\bH\x00R\aisLiked\x88\x01\x01B\v\n" +
	"\t_is_liked\"\x8d\x01\n" +
	"\x0fRepliesResponse\x12/\n" +
	"\areplies\x18\x01 \x03(\v2\x15.thread.ReplyResponseR\areplies\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"\xa0\x02\n" +
	"\fPollResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tthread_id\x18\x02 \x01(\tR\bthreadId\x12\x1a\n" +
	"\bquestion\x18\x03 \x01(\tR\bquestion\x12,\n" +
	"\aoptions\x18\x04 \x03(\v2\x12.thread.PollOptionR\aoptions\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12!\n" +
	"\fis_anonymous\x18\x06 \x01(\bR\visAnonymous\x12+\n" +
	"\x0fvoted_option_id\x18\a \x01(\tH\x00R\rvotedOptionId\x88\x01\x01B\x12\n" +
	"\x10_voted_option_id\"\xb1\x01\n" +
	"\x13PollResultsResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bquestion\x18\x02 \x01(\tR\bquestion\x122\n" +
	"\aresults\x18\x03 \x03(\v2\x18.thread.PollOptionResultR\aresults\x12\x1f\n" +
	"\vtotal_votes\x18\x04 \x01(\x03R\n" +
	"totalVotes\x12\x19\n" +
	"\bis_ended\x18\x05 \x01(\bR\aisEnded\"u\n" +
	"\x10PollOptionResult\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12\x1d\n" +
	"\n" +
	"vote_count\x18\x03 \x01(\x03R\tvoteCount\x12\x1e\n" +
	"\n" +
	"percentage\x18\x04 \x01(\x01R\n" +
	"percentage\"\xbd\x01\n" +
	"\x04User\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12\x14\n" +
	"\x05email\x18\x04 \x01(\tR\x05email\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x05 \x01(\tR\tavatarUrl\x12\x10\n" +
	"\x03bio\x18\x06 \x01(\tR\x03bio\x12\x1f\n" +
	"\vis_verified\x18\a \x01(\bR\n" +
	"isVerified\"X\n" +
	"\x0fHashtagResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12!\n" +
	"\fthread_count\x18\x03 \x01(\x03R\vthreadCount\"2\n" +
	"\x1aGetTrendingHashtagsRequest\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\"R\n" +
	"\x1bGetTrendingHashtagsResponse\x123\n" +
	"\bhashtags\x18\x01 \x03(\v2\x17.thread.HashtagResponseR\bhashtags2\x9e\f\n" +
	"\rThreadService\x12C\n" +
	"\fCreateThread\x12\x1b.thread.CreateThreadRequest\x1a\x16.thread.ThreadResponse\x12A\n" +
	"\rGetThreadById\x12\x18.thread.GetThreadRequest\x1a\x16.thread.ThreadResponse\x12L\n" +
	"\x10GetThreadsByUser\x12\x1f.thread.GetThreadsByUserRequest\x1a\x17.thread.ThreadsResponse\x12F\n" +
	"\rGetAllThreads\x12\x1c.thread.GetAllThreadsRequest\x1a\x17.thread.ThreadsResponse\x12C\n" +
	"\fUpdateThread\x12\x1b.thread.UpdateThreadRequest\x1a\x16.thread.ThreadResponse\x12C\n" +
	"\fDeleteThread\x12\x1b.thread.DeleteThreadRequest\x1a\x16.google.protobuf.Empty\x12@\n" +
	"\vCreateReply\x12\x1a.thread.CreateReplyRequest\x1a\x15.thread.ReplyResponse\x12P\n" +
	"\x12GetRepliesByThread\x12!.thread.GetRepliesByThreadRequest\x1a\x17.thread.RepliesResponse\x12@\n" +
	"\vUpdateReply\x12\x1a.thread.UpdateReplyRequest\x1a\x15.thread.ReplyResponse\x12A\n" +
	"\vDeleteReply\x12\x1a.thread.DeleteReplyRequest\x1a\x16.google.protobuf.Empty\x12?\n" +
	"\n" +
	"LikeThread\x12\x19.thread.LikeThreadRequest\x1a\x16.google.protobuf.Empty\x12C\n" +
	"\fUnlikeThread\x12\x1b.thread.UnlikeThreadRequest\x1a\x16.google.protobuf.Empty\x12=\n" +
	"\tLikeReply\x12\x18.thread.LikeReplyRequest\x1a\x16.google.protobuf.Empty\x12A\n" +
	"\vUnlikeReply\x12\x1a.thread.UnlikeReplyRequest\x1a\x16.google.protobuf.Empty\x12C\n" +
	"\fRepostThread\x12\x1b.thread.RepostThreadRequest\x1a\x16.google.protobuf.Empty\x12C\n" +
	"\fRemoveRepost\x12\x1b.thread.RemoveRepostRequest\x1a\x16.google.protobuf.Empty\x12G\n" +
	"\x0eBookmarkThread\x12\x1d.thread.BookmarkThreadRequest\x1a\x16.google.protobuf.Empty\x12G\n" +
	"\x0eRemoveBookmark\x12\x1d.thread.RemoveBookmarkRequest\x1a\x16.google.protobuf.Empty\x12=\n" +
	"\n" +
	"CreatePoll\x12\x19.thread.CreatePollRequest\x1a\x14.thread.PollResponse\x12;\n" +
	"\bVotePoll\x12\x17.thread.VotePollRequest\x1a\x16.google.protobuf.Empty\x12L\n" +
	"\x0eGetPollResults\x12\x1d.thread.GetPollResultsRequest\x1a\x1b.thread.PollResultsResponse\x12^\n" +
	"\x13GetTrendingHashtags\x12\".thread.GetTrendingHashtagsRequest\x1a#.thread.GetTrendingHashtagsResponseB%Z#aycom/backend/services/thread/protob\x06proto3"

var (
	file_proto_thread_proto_rawDescOnce sync.Once
	file_proto_thread_proto_rawDescData []byte
)

func file_proto_thread_proto_rawDescGZIP() []byte {
	file_proto_thread_proto_rawDescOnce.Do(func() {
		file_proto_thread_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_thread_proto_rawDesc), len(file_proto_thread_proto_rawDesc)))
	})
	return file_proto_thread_proto_rawDescData
}

var file_proto_thread_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_proto_thread_proto_goTypes = []any{
	(*Thread)(nil),                      // 0: thread.Thread
	(*Media)(nil),                       // 1: thread.Media
	(*MediaResponse)(nil),               // 2: thread.MediaResponse
	(*Poll)(nil),                        // 3: thread.Poll
	(*PollInfo)(nil),                    // 4: thread.PollInfo
	(*PollOption)(nil),                  // 5: thread.PollOption
	(*Reply)(nil),                       // 6: thread.Reply
	(*CreateThreadRequest)(nil),         // 7: thread.CreateThreadRequest
	(*PollRequest)(nil),                 // 8: thread.PollRequest
	(*GetThreadRequest)(nil),            // 9: thread.GetThreadRequest
	(*GetThreadsByUserRequest)(nil),     // 10: thread.GetThreadsByUserRequest
	(*GetAllThreadsRequest)(nil),        // 11: thread.GetAllThreadsRequest
	(*UpdateThreadRequest)(nil),         // 12: thread.UpdateThreadRequest
	(*DeleteThreadRequest)(nil),         // 13: thread.DeleteThreadRequest
	(*CreateReplyRequest)(nil),          // 14: thread.CreateReplyRequest
	(*GetRepliesByThreadRequest)(nil),   // 15: thread.GetRepliesByThreadRequest
	(*UpdateReplyRequest)(nil),          // 16: thread.UpdateReplyRequest
	(*DeleteReplyRequest)(nil),          // 17: thread.DeleteReplyRequest
	(*LikeThreadRequest)(nil),           // 18: thread.LikeThreadRequest
	(*UnlikeThreadRequest)(nil),         // 19: thread.UnlikeThreadRequest
	(*LikeReplyRequest)(nil),            // 20: thread.LikeReplyRequest
	(*UnlikeReplyRequest)(nil),          // 21: thread.UnlikeReplyRequest
	(*RepostThreadRequest)(nil),         // 22: thread.RepostThreadRequest
	(*RemoveRepostRequest)(nil),         // 23: thread.RemoveRepostRequest
	(*BookmarkThreadRequest)(nil),       // 24: thread.BookmarkThreadRequest
	(*RemoveBookmarkRequest)(nil),       // 25: thread.RemoveBookmarkRequest
	(*CreatePollRequest)(nil),           // 26: thread.CreatePollRequest
	(*VotePollRequest)(nil),             // 27: thread.VotePollRequest
	(*GetPollResultsRequest)(nil),       // 28: thread.GetPollResultsRequest
	(*ThreadResponse)(nil),              // 29: thread.ThreadResponse
	(*ThreadsResponse)(nil),             // 30: thread.ThreadsResponse
	(*ReplyResponse)(nil),               // 31: thread.ReplyResponse
	(*RepliesResponse)(nil),             // 32: thread.RepliesResponse
	(*PollResponse)(nil),                // 33: thread.PollResponse
	(*PollResultsResponse)(nil),         // 34: thread.PollResultsResponse
	(*PollOptionResult)(nil),            // 35: thread.PollOptionResult
	(*User)(nil),                        // 36: thread.User
	(*HashtagResponse)(nil),             // 37: thread.HashtagResponse
	(*GetTrendingHashtagsRequest)(nil),  // 38: thread.GetTrendingHashtagsRequest
	(*GetTrendingHashtagsResponse)(nil), // 39: thread.GetTrendingHashtagsResponse
	(*timestamppb.Timestamp)(nil),       // 40: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 41: google.protobuf.Empty
}
var file_proto_thread_proto_depIdxs = []int32{
	1,  // 0: thread.Thread.media:type_name -> thread.Media
	40, // 1: thread.Thread.created_at:type_name -> google.protobuf.Timestamp
	40, // 2: thread.Thread.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 3: thread.Thread.poll:type_name -> thread.Poll
	40, // 4: thread.Thread.scheduled_at:type_name -> google.protobuf.Timestamp
	5,  // 5: thread.Poll.options:type_name -> thread.PollOption
	40, // 6: thread.Poll.end_time:type_name -> google.protobuf.Timestamp
	40, // 7: thread.PollInfo.end_time:type_name -> google.protobuf.Timestamp
	1,  // 8: thread.Reply.media:type_name -> thread.Media
	40, // 9: thread.Reply.created_at:type_name -> google.protobuf.Timestamp
	40, // 10: thread.Reply.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 11: thread.CreateThreadRequest.media:type_name -> thread.Media
	8,  // 12: thread.CreateThreadRequest.poll:type_name -> thread.PollRequest
	40, // 13: thread.CreateThreadRequest.scheduled_at:type_name -> google.protobuf.Timestamp
	40, // 14: thread.PollRequest.end_time:type_name -> google.protobuf.Timestamp
	1,  // 15: thread.UpdateThreadRequest.media:type_name -> thread.Media
	1,  // 16: thread.CreateReplyRequest.media:type_name -> thread.Media
	1,  // 17: thread.UpdateReplyRequest.media:type_name -> thread.Media
	8,  // 18: thread.CreatePollRequest.poll:type_name -> thread.PollRequest
	2,  // 19: thread.ThreadResponse.media:type_name -> thread.MediaResponse
	40, // 20: thread.ThreadResponse.created_at:type_name -> google.protobuf.Timestamp
	40, // 21: thread.ThreadResponse.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 22: thread.ThreadResponse.poll:type_name -> thread.Poll
	40, // 23: thread.ThreadResponse.scheduled_at:type_name -> google.protobuf.Timestamp
	36, // 24: thread.ThreadResponse.user:type_name -> thread.User
	29, // 25: thread.ThreadsResponse.threads:type_name -> thread.ThreadResponse
	1,  // 26: thread.ReplyResponse.media:type_name -> thread.Media
	40, // 27: thread.ReplyResponse.created_at:type_name -> google.protobuf.Timestamp
	40, // 28: thread.ReplyResponse.updated_at:type_name -> google.protobuf.Timestamp
	31, // 29: thread.RepliesResponse.replies:type_name -> thread.ReplyResponse
	5,  // 30: thread.PollResponse.options:type_name -> thread.PollOption
	40, // 31: thread.PollResponse.end_time:type_name -> google.protobuf.Timestamp
	35, // 32: thread.PollResultsResponse.results:type_name -> thread.PollOptionResult
	37, // 33: thread.GetTrendingHashtagsResponse.hashtags:type_name -> thread.HashtagResponse
	7,  // 34: thread.ThreadService.CreateThread:input_type -> thread.CreateThreadRequest
	9,  // 35: thread.ThreadService.GetThreadById:input_type -> thread.GetThreadRequest
	10, // 36: thread.ThreadService.GetThreadsByUser:input_type -> thread.GetThreadsByUserRequest
	11, // 37: thread.ThreadService.GetAllThreads:input_type -> thread.GetAllThreadsRequest
	12, // 38: thread.ThreadService.UpdateThread:input_type -> thread.UpdateThreadRequest
	13, // 39: thread.ThreadService.DeleteThread:input_type -> thread.DeleteThreadRequest
	14, // 40: thread.ThreadService.CreateReply:input_type -> thread.CreateReplyRequest
	15, // 41: thread.ThreadService.GetRepliesByThread:input_type -> thread.GetRepliesByThreadRequest
	16, // 42: thread.ThreadService.UpdateReply:input_type -> thread.UpdateReplyRequest
	17, // 43: thread.ThreadService.DeleteReply:input_type -> thread.DeleteReplyRequest
	18, // 44: thread.ThreadService.LikeThread:input_type -> thread.LikeThreadRequest
	19, // 45: thread.ThreadService.UnlikeThread:input_type -> thread.UnlikeThreadRequest
	20, // 46: thread.ThreadService.LikeReply:input_type -> thread.LikeReplyRequest
	21, // 47: thread.ThreadService.UnlikeReply:input_type -> thread.UnlikeReplyRequest
	22, // 48: thread.ThreadService.RepostThread:input_type -> thread.RepostThreadRequest
	23, // 49: thread.ThreadService.RemoveRepost:input_type -> thread.RemoveRepostRequest
	24, // 50: thread.ThreadService.BookmarkThread:input_type -> thread.BookmarkThreadRequest
	25, // 51: thread.ThreadService.RemoveBookmark:input_type -> thread.RemoveBookmarkRequest
	26, // 52: thread.ThreadService.CreatePoll:input_type -> thread.CreatePollRequest
	27, // 53: thread.ThreadService.VotePoll:input_type -> thread.VotePollRequest
	28, // 54: thread.ThreadService.GetPollResults:input_type -> thread.GetPollResultsRequest
	38, // 55: thread.ThreadService.GetTrendingHashtags:input_type -> thread.GetTrendingHashtagsRequest
	29, // 56: thread.ThreadService.CreateThread:output_type -> thread.ThreadResponse
	29, // 57: thread.ThreadService.GetThreadById:output_type -> thread.ThreadResponse
	30, // 58: thread.ThreadService.GetThreadsByUser:output_type -> thread.ThreadsResponse
	30, // 59: thread.ThreadService.GetAllThreads:output_type -> thread.ThreadsResponse
	29, // 60: thread.ThreadService.UpdateThread:output_type -> thread.ThreadResponse
	41, // 61: thread.ThreadService.DeleteThread:output_type -> google.protobuf.Empty
	31, // 62: thread.ThreadService.CreateReply:output_type -> thread.ReplyResponse
	32, // 63: thread.ThreadService.GetRepliesByThread:output_type -> thread.RepliesResponse
	31, // 64: thread.ThreadService.UpdateReply:output_type -> thread.ReplyResponse
	41, // 65: thread.ThreadService.DeleteReply:output_type -> google.protobuf.Empty
	41, // 66: thread.ThreadService.LikeThread:output_type -> google.protobuf.Empty
	41, // 67: thread.ThreadService.UnlikeThread:output_type -> google.protobuf.Empty
	41, // 68: thread.ThreadService.LikeReply:output_type -> google.protobuf.Empty
	41, // 69: thread.ThreadService.UnlikeReply:output_type -> google.protobuf.Empty
	41, // 70: thread.ThreadService.RepostThread:output_type -> google.protobuf.Empty
	41, // 71: thread.ThreadService.RemoveRepost:output_type -> google.protobuf.Empty
	41, // 72: thread.ThreadService.BookmarkThread:output_type -> google.protobuf.Empty
	41, // 73: thread.ThreadService.RemoveBookmark:output_type -> google.protobuf.Empty
	33, // 74: thread.ThreadService.CreatePoll:output_type -> thread.PollResponse
	41, // 75: thread.ThreadService.VotePoll:output_type -> google.protobuf.Empty
	34, // 76: thread.ThreadService.GetPollResults:output_type -> thread.PollResultsResponse
	39, // 77: thread.ThreadService.GetTrendingHashtags:output_type -> thread.GetTrendingHashtagsResponse
	56, // [56:78] is the sub-list for method output_type
	34, // [34:56] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_proto_thread_proto_init() }
func file_proto_thread_proto_init() {
	if File_proto_thread_proto != nil {
		return
	}
	file_proto_thread_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[6].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[7].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[12].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[14].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[16].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[29].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[31].OneofWrappers = []any{}
	file_proto_thread_proto_msgTypes[33].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_thread_proto_rawDesc), len(file_proto_thread_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_thread_proto_goTypes,
		DependencyIndexes: file_proto_thread_proto_depIdxs,
		MessageInfos:      file_proto_thread_proto_msgTypes,
	}.Build()
	File_proto_thread_proto = out.File
	file_proto_thread_proto_goTypes = nil
	file_proto_thread_proto_depIdxs = nil
}
