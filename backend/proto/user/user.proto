syntax = "proto3";

package user;

option go_package = "aycom/backend/proto/user";

// User service definition
service UserService {
  // Get user by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
  
  // Register a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  
  // Update user information
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
  
  // Delete a user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
  
  // Update user verification status
  rpc UpdateUserVerificationStatus(UpdateUserVerificationStatusRequest) returns (UpdateUserVerificationStatusResponse) {}

  // Authenticate a user
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {}

  // Get user by email
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse) {}

  // Follow a user
  rpc FollowUser(FollowUserRequest) returns (FollowUserResponse) {}

  // Unfollow a user
  rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse) {}

  // Get user followers
  rpc GetFollowers(GetFollowersRequest) returns (GetFollowersResponse) {}

  // Get users being followed
  rpc GetFollowing(GetFollowingRequest) returns (GetFollowingResponse) {}

  // Search users
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {}
  
  // Get recommended users (sorted by highest follower count)
  rpc GetRecommendedUsers(GetRecommendedUsersRequest) returns (GetRecommendedUsersResponse) {}
}

// User contains user information
message User {
  string id = 1;
  string name = 2;
  string username = 3;
  string email = 4;
  string gender = 5;
  string date_of_birth = 6;
  string bio = 7;
  string location = 8;
  string website = 9;
  string profile_picture_url = 10;
  string banner_url = 11;
  string created_at = 12;
  string updated_at = 13;

  // Added fields for registration
  string password = 14; // Raw password sent from gateway, hashed by user service
  string security_question = 15;
  string security_answer = 16;
  bool subscribe_to_newsletter = 17;
  bool is_verified = 18;
  int32 follower_count = 19;
  int32 following_count = 20;
  bool is_following = 21; // Whether the requesting user is following this user
}

// GetUserRequest is used to request user information by ID
message GetUserRequest {
  string user_id = 1;
}

// GetUserResponse contains user information
message GetUserResponse {
  User user = 1;
}

// CreateUserRequest contains information needed to register a new user
message CreateUserRequest {
  User user = 1;
}

// CreateUserResponse contains the result of a create operation
message CreateUserResponse {
  User user = 1;
}

// UpdateUserRequest contains updated user information
message UpdateUserRequest {
  User user = 1;
  string user_id = 2;
  string name = 3;
  string email = 4;
  string profile_picture_url = 5;
  string banner_url = 6;
}

// UpdateUserResponse contains the result of an update operation
message UpdateUserResponse {
  User user = 1;
}

// DeleteUserRequest contains user ID to delete
message DeleteUserRequest {
  string user_id = 1;
}

// DeleteUserResponse indicates the result of a delete operation
message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

// UpdateUserVerificationStatusRequest contains request to update user verification status
message UpdateUserVerificationStatusRequest {
  string user_id = 1;
  bool is_verified = 2;
}

// UpdateUserVerificationStatusResponse contains response to update user verification status
message UpdateUserVerificationStatusResponse {
  bool success = 1;
  string message = 2;
}

// Request for user login
message LoginUserRequest {
  string email = 1;
  string password = 2;
}

// Response for user login, containing user details if successful
message LoginUserResponse {
  User user = 1; // Return the full user object on successful login
}

// Request for getting user by email
message GetUserByEmailRequest {
  string email = 1;
}

// Response for getting user by email
message GetUserByEmailResponse {
  User user = 1;
}

// Request to follow a user
message FollowUserRequest {
  string follower_id = 1; // ID of the user who is following
  string followed_id = 2; // ID of the user being followed
}

// Response for follow user operation
message FollowUserResponse {
  bool success = 1;
  string message = 2;
}

// Request to unfollow a user
message UnfollowUserRequest {
  string follower_id = 1; // ID of the user who is unfollowing
  string followed_id = 2; // ID of the user being unfollowed
}

// Response for unfollow user operation
message UnfollowUserResponse {
  bool success = 1;
  string message = 2;
}

// Request to get followers of a user
message GetFollowersRequest {
  string user_id = 1; // ID of the user whose followers we want
  int32 page = 2;     // Pagination - page number
  int32 limit = 3;    // Pagination - items per page
}

// Response containing list of followers
message GetFollowersResponse {
  repeated User followers = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 limit = 4;
}

// Request to get users being followed
message GetFollowingRequest {
  string user_id = 1; // ID of the user whose following list we want
  int32 page = 2;     // Pagination - page number
  int32 limit = 3;    // Pagination - items per page
}

// Response containing list of followed users
message GetFollowingResponse {
  repeated User following = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 limit = 4;
}

// Request to search users
message SearchUsersRequest {
  string query = 1;   // Search query
  string filter = 2;  // Optional filter (verified, following, etc.)
  int32 page = 3;     // Pagination - page number
  int32 limit = 4;    // Pagination - items per page
}

// Response containing search results
message SearchUsersResponse {
  repeated User users = 1;
  int32 total_count = 2;
}

// Request to get recommended users
message GetRecommendedUsersRequest {
  string user_id = 1; // Optional: ID of the requesting user (to exclude already followed users)
  int32 limit = 2;    // Number of recommendations to fetch
}

// Response containing recommended users
message GetRecommendedUsersResponse {
  repeated User users = 1;
} 