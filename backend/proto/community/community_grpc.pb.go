// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/community/community.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommunityService_CreateCommunity_FullMethodName             = "/community.CommunityService/CreateCommunity"
	CommunityService_UpdateCommunity_FullMethodName             = "/community.CommunityService/UpdateCommunity"
	CommunityService_ApproveCommunity_FullMethodName            = "/community.CommunityService/ApproveCommunity"
	CommunityService_DeleteCommunity_FullMethodName             = "/community.CommunityService/DeleteCommunity"
	CommunityService_GetCommunityByID_FullMethodName            = "/community.CommunityService/GetCommunityByID"
	CommunityService_ListCommunities_FullMethodName             = "/community.CommunityService/ListCommunities"
	CommunityService_SearchCommunities_FullMethodName           = "/community.CommunityService/SearchCommunities"
	CommunityService_ListUserCommunities_FullMethodName         = "/community.CommunityService/ListUserCommunities"
	CommunityService_CreateCategory_FullMethodName              = "/community.CommunityService/CreateCategory"
	CommunityService_UpdateCategory_FullMethodName              = "/community.CommunityService/UpdateCategory"
	CommunityService_DeleteCategory_FullMethodName              = "/community.CommunityService/DeleteCategory"
	CommunityService_GetCategoryByID_FullMethodName             = "/community.CommunityService/GetCategoryByID"
	CommunityService_ListCategories_FullMethodName              = "/community.CommunityService/ListCategories"
	CommunityService_AddCommunityToCategory_FullMethodName      = "/community.CommunityService/AddCommunityToCategory"
	CommunityService_RemoveCommunityFromCategory_FullMethodName = "/community.CommunityService/RemoveCommunityFromCategory"
	CommunityService_GetCommunityCategoriesById_FullMethodName  = "/community.CommunityService/GetCommunityCategoriesById"
	CommunityService_AddMember_FullMethodName                   = "/community.CommunityService/AddMember"
	CommunityService_RemoveMember_FullMethodName                = "/community.CommunityService/RemoveMember"
	CommunityService_ListMembers_FullMethodName                 = "/community.CommunityService/ListMembers"
	CommunityService_UpdateMemberRole_FullMethodName            = "/community.CommunityService/UpdateMemberRole"
	CommunityService_AddRule_FullMethodName                     = "/community.CommunityService/AddRule"
	CommunityService_RemoveRule_FullMethodName                  = "/community.CommunityService/RemoveRule"
	CommunityService_ListRules_FullMethodName                   = "/community.CommunityService/ListRules"
	CommunityService_RequestToJoin_FullMethodName               = "/community.CommunityService/RequestToJoin"
	CommunityService_ApproveJoinRequest_FullMethodName          = "/community.CommunityService/ApproveJoinRequest"
	CommunityService_RejectJoinRequest_FullMethodName           = "/community.CommunityService/RejectJoinRequest"
	CommunityService_ListJoinRequests_FullMethodName            = "/community.CommunityService/ListJoinRequests"
	CommunityService_IsMember_FullMethodName                    = "/community.CommunityService/IsMember"
	CommunityService_HasPendingJoinRequest_FullMethodName       = "/community.CommunityService/HasPendingJoinRequest"
	CommunityService_CreateChat_FullMethodName                  = "/community.CommunityService/CreateChat"
	CommunityService_AddChatParticipant_FullMethodName          = "/community.CommunityService/AddChatParticipant"
	CommunityService_RemoveChatParticipant_FullMethodName       = "/community.CommunityService/RemoveChatParticipant"
	CommunityService_ListChats_FullMethodName                   = "/community.CommunityService/ListChats"
	CommunityService_ListChatParticipants_FullMethodName        = "/community.CommunityService/ListChatParticipants"
	CommunityService_SendMessage_FullMethodName                 = "/community.CommunityService/SendMessage"
	CommunityService_DeleteMessage_FullMethodName               = "/community.CommunityService/DeleteMessage"
	CommunityService_UnsendMessage_FullMethodName               = "/community.CommunityService/UnsendMessage"
	CommunityService_ListMessages_FullMethodName                = "/community.CommunityService/ListMessages"
	CommunityService_SearchMessages_FullMethodName              = "/community.CommunityService/SearchMessages"
)

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Community service definition
type CommunityServiceClient interface {
	// Community management
	CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CommunityResponse, error)
	UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*CommunityResponse, error)
	ApproveCommunity(ctx context.Context, in *ApproveCommunityRequest, opts ...grpc.CallOption) (*CommunityResponse, error)
	DeleteCommunity(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetCommunityByID(ctx context.Context, in *GetCommunityByIDRequest, opts ...grpc.CallOption) (*CommunityResponse, error)
	ListCommunities(ctx context.Context, in *ListCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error)
	SearchCommunities(ctx context.Context, in *SearchCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error)
	ListUserCommunities(ctx context.Context, in *ListUserCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error)
	// Category management
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetCategoryByID(ctx context.Context, in *GetCategoryByIDRequest, opts ...grpc.CallOption) (*CategoryResponse, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	AddCommunityToCategory(ctx context.Context, in *AddCommunityToCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveCommunityFromCategory(ctx context.Context, in *RemoveCommunityFromCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetCommunityCategoriesById(ctx context.Context, in *GetCommunityCategoriesByIdRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	// Member management
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	// Community rules
	AddRule(ctx context.Context, in *AddRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	RemoveRule(ctx context.Context, in *RemoveRuleRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	// Join requests
	RequestToJoin(ctx context.Context, in *RequestToJoinRequest, opts ...grpc.CallOption) (*JoinRequestResponse, error)
	ApproveJoinRequest(ctx context.Context, in *ApproveJoinRequestRequest, opts ...grpc.CallOption) (*JoinRequestResponse, error)
	RejectJoinRequest(ctx context.Context, in *RejectJoinRequestRequest, opts ...grpc.CallOption) (*JoinRequestResponse, error)
	ListJoinRequests(ctx context.Context, in *ListJoinRequestsRequest, opts ...grpc.CallOption) (*ListJoinRequestsResponse, error)
	IsMember(ctx context.Context, in *IsMemberRequest, opts ...grpc.CallOption) (*IsMemberResponse, error)
	HasPendingJoinRequest(ctx context.Context, in *HasPendingJoinRequestRequest, opts ...grpc.CallOption) (*HasPendingJoinRequestResponse, error)
	// Chat
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	AddChatParticipant(ctx context.Context, in *AddChatParticipantRequest, opts ...grpc.CallOption) (*ChatParticipantResponse, error)
	RemoveChatParticipant(ctx context.Context, in *RemoveChatParticipantRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error)
	ListChatParticipants(ctx context.Context, in *ListChatParticipantsRequest, opts ...grpc.CallOption) (*ListChatParticipantsResponse, error)
	// Messages
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UnsendMessage(ctx context.Context, in *UnsendMessageRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) CreateCommunity(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*CommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommunityResponse)
	err := c.cc.Invoke(ctx, CommunityService_CreateCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateCommunity(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*CommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommunityResponse)
	err := c.cc.Invoke(ctx, CommunityService_UpdateCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ApproveCommunity(ctx context.Context, in *ApproveCommunityRequest, opts ...grpc.CallOption) (*CommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommunityResponse)
	err := c.cc.Invoke(ctx, CommunityService_ApproveCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) DeleteCommunity(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_DeleteCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityByID(ctx context.Context, in *GetCommunityByIDRequest, opts ...grpc.CallOption) (*CommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommunityResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListCommunities(ctx context.Context, in *ListCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommunitiesResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListCommunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) SearchCommunities(ctx context.Context, in *SearchCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommunitiesResponse)
	err := c.cc.Invoke(ctx, CommunityService_SearchCommunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListUserCommunities(ctx context.Context, in *ListUserCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommunitiesResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListUserCommunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CommunityService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CommunityService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCategoryByID(ctx context.Context, in *GetCategoryByIDRequest, opts ...grpc.CallOption) (*CategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCategoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) AddCommunityToCategory(ctx context.Context, in *AddCommunityToCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_AddCommunityToCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RemoveCommunityFromCategory(ctx context.Context, in *RemoveCommunityFromCategoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_RemoveCommunityFromCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetCommunityCategoriesById(ctx context.Context, in *GetCommunityCategoriesByIdRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetCommunityCategoriesById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, CommunityService_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_RemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, CommunityService_UpdateMemberRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) AddRule(ctx context.Context, in *AddRuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, CommunityService_AddRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RemoveRule(ctx context.Context, in *RemoveRuleRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_RemoveRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RequestToJoin(ctx context.Context, in *RequestToJoinRequest, opts ...grpc.CallOption) (*JoinRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRequestResponse)
	err := c.cc.Invoke(ctx, CommunityService_RequestToJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ApproveJoinRequest(ctx context.Context, in *ApproveJoinRequestRequest, opts ...grpc.CallOption) (*JoinRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRequestResponse)
	err := c.cc.Invoke(ctx, CommunityService_ApproveJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RejectJoinRequest(ctx context.Context, in *RejectJoinRequestRequest, opts ...grpc.CallOption) (*JoinRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRequestResponse)
	err := c.cc.Invoke(ctx, CommunityService_RejectJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListJoinRequests(ctx context.Context, in *ListJoinRequestsRequest, opts ...grpc.CallOption) (*ListJoinRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJoinRequestsResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListJoinRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) IsMember(ctx context.Context, in *IsMemberRequest, opts ...grpc.CallOption) (*IsMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMemberResponse)
	err := c.cc.Invoke(ctx, CommunityService_IsMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) HasPendingJoinRequest(ctx context.Context, in *HasPendingJoinRequestRequest, opts ...grpc.CallOption) (*HasPendingJoinRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasPendingJoinRequestResponse)
	err := c.cc.Invoke(ctx, CommunityService_HasPendingJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, CommunityService_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) AddChatParticipant(ctx context.Context, in *AddChatParticipantRequest, opts ...grpc.CallOption) (*ChatParticipantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatParticipantResponse)
	err := c.cc.Invoke(ctx, CommunityService_AddChatParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RemoveChatParticipant(ctx context.Context, in *RemoveChatParticipantRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_RemoveChatParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatsResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListChatParticipants(ctx context.Context, in *ListChatParticipantsRequest, opts ...grpc.CallOption) (*ListChatParticipantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatParticipantsResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListChatParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, CommunityService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UnsendMessage(ctx context.Context, in *UnsendMessageRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, CommunityService_UnsendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) SearchMessages(ctx context.Context, in *SearchMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, CommunityService_SearchMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations must embed UnimplementedCommunityServiceServer
// for forward compatibility.
//
// Community service definition
type CommunityServiceServer interface {
	// Community management
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CommunityResponse, error)
	UpdateCommunity(context.Context, *UpdateCommunityRequest) (*CommunityResponse, error)
	ApproveCommunity(context.Context, *ApproveCommunityRequest) (*CommunityResponse, error)
	DeleteCommunity(context.Context, *DeleteCommunityRequest) (*EmptyResponse, error)
	GetCommunityByID(context.Context, *GetCommunityByIDRequest) (*CommunityResponse, error)
	ListCommunities(context.Context, *ListCommunitiesRequest) (*ListCommunitiesResponse, error)
	SearchCommunities(context.Context, *SearchCommunitiesRequest) (*ListCommunitiesResponse, error)
	ListUserCommunities(context.Context, *ListUserCommunitiesRequest) (*ListCommunitiesResponse, error)
	// Category management
	CreateCategory(context.Context, *CreateCategoryRequest) (*CategoryResponse, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*CategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*EmptyResponse, error)
	GetCategoryByID(context.Context, *GetCategoryByIDRequest) (*CategoryResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	AddCommunityToCategory(context.Context, *AddCommunityToCategoryRequest) (*EmptyResponse, error)
	RemoveCommunityFromCategory(context.Context, *RemoveCommunityFromCategoryRequest) (*EmptyResponse, error)
	GetCommunityCategoriesById(context.Context, *GetCommunityCategoriesByIdRequest) (*ListCategoriesResponse, error)
	// Member management
	AddMember(context.Context, *AddMemberRequest) (*MemberResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*EmptyResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*MemberResponse, error)
	// Community rules
	AddRule(context.Context, *AddRuleRequest) (*RuleResponse, error)
	RemoveRule(context.Context, *RemoveRuleRequest) (*EmptyResponse, error)
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	// Join requests
	RequestToJoin(context.Context, *RequestToJoinRequest) (*JoinRequestResponse, error)
	ApproveJoinRequest(context.Context, *ApproveJoinRequestRequest) (*JoinRequestResponse, error)
	RejectJoinRequest(context.Context, *RejectJoinRequestRequest) (*JoinRequestResponse, error)
	ListJoinRequests(context.Context, *ListJoinRequestsRequest) (*ListJoinRequestsResponse, error)
	IsMember(context.Context, *IsMemberRequest) (*IsMemberResponse, error)
	HasPendingJoinRequest(context.Context, *HasPendingJoinRequestRequest) (*HasPendingJoinRequestResponse, error)
	// Chat
	CreateChat(context.Context, *CreateChatRequest) (*ChatResponse, error)
	AddChatParticipant(context.Context, *AddChatParticipantRequest) (*ChatParticipantResponse, error)
	RemoveChatParticipant(context.Context, *RemoveChatParticipantRequest) (*EmptyResponse, error)
	ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error)
	ListChatParticipants(context.Context, *ListChatParticipantsRequest) (*ListChatParticipantsResponse, error)
	// Messages
	SendMessage(context.Context, *SendMessageRequest) (*MessageResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*EmptyResponse, error)
	UnsendMessage(context.Context, *UnsendMessageRequest) (*EmptyResponse, error)
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	SearchMessages(context.Context, *SearchMessagesRequest) (*ListMessagesResponse, error)
	mustEmbedUnimplementedCommunityServiceServer()
}

// UnimplementedCommunityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommunityServiceServer struct{}

func (UnimplementedCommunityServiceServer) CreateCommunity(context.Context, *CreateCommunityRequest) (*CommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateCommunity(context.Context, *UpdateCommunityRequest) (*CommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) ApproveCommunity(context.Context, *ApproveCommunityRequest) (*CommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) DeleteCommunity(context.Context, *DeleteCommunityRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunity not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityByID(context.Context, *GetCommunityByIDRequest) (*CommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityByID not implemented")
}
func (UnimplementedCommunityServiceServer) ListCommunities(context.Context, *ListCommunitiesRequest) (*ListCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunities not implemented")
}
func (UnimplementedCommunityServiceServer) SearchCommunities(context.Context, *SearchCommunitiesRequest) (*ListCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCommunities not implemented")
}
func (UnimplementedCommunityServiceServer) ListUserCommunities(context.Context, *ListUserCommunitiesRequest) (*ListCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCommunities not implemented")
}
func (UnimplementedCommunityServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCommunityServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCommunityServiceServer) GetCategoryByID(context.Context, *GetCategoryByIDRequest) (*CategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByID not implemented")
}
func (UnimplementedCommunityServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedCommunityServiceServer) AddCommunityToCategory(context.Context, *AddCommunityToCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunityToCategory not implemented")
}
func (UnimplementedCommunityServiceServer) RemoveCommunityFromCategory(context.Context, *RemoveCommunityFromCategoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCommunityFromCategory not implemented")
}
func (UnimplementedCommunityServiceServer) GetCommunityCategoriesById(context.Context, *GetCommunityCategoriesByIdRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityCategoriesById not implemented")
}
func (UnimplementedCommunityServiceServer) AddMember(context.Context, *AddMemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedCommunityServiceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedCommunityServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRole not implemented")
}
func (UnimplementedCommunityServiceServer) AddRule(context.Context, *AddRuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (UnimplementedCommunityServiceServer) RemoveRule(context.Context, *RemoveRuleRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRule not implemented")
}
func (UnimplementedCommunityServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedCommunityServiceServer) RequestToJoin(context.Context, *RequestToJoinRequest) (*JoinRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToJoin not implemented")
}
func (UnimplementedCommunityServiceServer) ApproveJoinRequest(context.Context, *ApproveJoinRequestRequest) (*JoinRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveJoinRequest not implemented")
}
func (UnimplementedCommunityServiceServer) RejectJoinRequest(context.Context, *RejectJoinRequestRequest) (*JoinRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoinRequest not implemented")
}
func (UnimplementedCommunityServiceServer) ListJoinRequests(context.Context, *ListJoinRequestsRequest) (*ListJoinRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJoinRequests not implemented")
}
func (UnimplementedCommunityServiceServer) IsMember(context.Context, *IsMemberRequest) (*IsMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMember not implemented")
}
func (UnimplementedCommunityServiceServer) HasPendingJoinRequest(context.Context, *HasPendingJoinRequestRequest) (*HasPendingJoinRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPendingJoinRequest not implemented")
}
func (UnimplementedCommunityServiceServer) CreateChat(context.Context, *CreateChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedCommunityServiceServer) AddChatParticipant(context.Context, *AddChatParticipantRequest) (*ChatParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatParticipant not implemented")
}
func (UnimplementedCommunityServiceServer) RemoveChatParticipant(context.Context, *RemoveChatParticipantRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatParticipant not implemented")
}
func (UnimplementedCommunityServiceServer) ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedCommunityServiceServer) ListChatParticipants(context.Context, *ListChatParticipantsRequest) (*ListChatParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatParticipants not implemented")
}
func (UnimplementedCommunityServiceServer) SendMessage(context.Context, *SendMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedCommunityServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedCommunityServiceServer) UnsendMessage(context.Context, *UnsendMessageRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsendMessage not implemented")
}
func (UnimplementedCommunityServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedCommunityServiceServer) SearchMessages(context.Context, *SearchMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMessages not implemented")
}
func (UnimplementedCommunityServiceServer) mustEmbedUnimplementedCommunityServiceServer() {}
func (UnimplementedCommunityServiceServer) testEmbeddedByValue()                          {}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommunityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_CreateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_CreateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateCommunity(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateCommunity(ctx, req.(*UpdateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ApproveCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ApproveCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ApproveCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ApproveCommunity(ctx, req.(*ApproveCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_DeleteCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).DeleteCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_DeleteCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).DeleteCommunity(ctx, req.(*DeleteCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityByID(ctx, req.(*GetCommunityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListCommunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListCommunities(ctx, req.(*ListCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_SearchCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).SearchCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_SearchCommunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).SearchCommunities(ctx, req.(*SearchCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListUserCommunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListUserCommunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListUserCommunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListUserCommunities(ctx, req.(*ListUserCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCategoryByID(ctx, req.(*GetCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_AddCommunityToCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommunityToCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).AddCommunityToCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_AddCommunityToCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).AddCommunityToCategory(ctx, req.(*AddCommunityToCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RemoveCommunityFromCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommunityFromCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RemoveCommunityFromCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RemoveCommunityFromCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RemoveCommunityFromCategory(ctx, req.(*RemoveCommunityFromCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetCommunityCategoriesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityCategoriesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetCommunityCategoriesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetCommunityCategoriesById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetCommunityCategoriesById(ctx, req.(*GetCommunityCategoriesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateMemberRole(ctx, req.(*UpdateMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_AddRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).AddRule(ctx, req.(*AddRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RemoveRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RemoveRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RemoveRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RemoveRule(ctx, req.(*RemoveRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RequestToJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RequestToJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RequestToJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RequestToJoin(ctx, req.(*RequestToJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ApproveJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveJoinRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ApproveJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ApproveJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ApproveJoinRequest(ctx, req.(*ApproveJoinRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RejectJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectJoinRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RejectJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RejectJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RejectJoinRequest(ctx, req.(*RejectJoinRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListJoinRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJoinRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListJoinRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListJoinRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListJoinRequests(ctx, req.(*ListJoinRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_IsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).IsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_IsMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).IsMember(ctx, req.(*IsMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_HasPendingJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPendingJoinRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).HasPendingJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_HasPendingJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).HasPendingJoinRequest(ctx, req.(*HasPendingJoinRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_AddChatParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).AddChatParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_AddChatParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).AddChatParticipant(ctx, req.(*AddChatParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RemoveChatParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RemoveChatParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RemoveChatParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RemoveChatParticipant(ctx, req.(*RemoveChatParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListChats(ctx, req.(*ListChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListChatParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListChatParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListChatParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListChatParticipants(ctx, req.(*ListChatParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UnsendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UnsendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UnsendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UnsendMessage(ctx, req.(*UnsendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_SearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).SearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_SearchMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).SearchMessages(ctx, req.(*SearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommunity",
			Handler:    _CommunityService_CreateCommunity_Handler,
		},
		{
			MethodName: "UpdateCommunity",
			Handler:    _CommunityService_UpdateCommunity_Handler,
		},
		{
			MethodName: "ApproveCommunity",
			Handler:    _CommunityService_ApproveCommunity_Handler,
		},
		{
			MethodName: "DeleteCommunity",
			Handler:    _CommunityService_DeleteCommunity_Handler,
		},
		{
			MethodName: "GetCommunityByID",
			Handler:    _CommunityService_GetCommunityByID_Handler,
		},
		{
			MethodName: "ListCommunities",
			Handler:    _CommunityService_ListCommunities_Handler,
		},
		{
			MethodName: "SearchCommunities",
			Handler:    _CommunityService_SearchCommunities_Handler,
		},
		{
			MethodName: "ListUserCommunities",
			Handler:    _CommunityService_ListUserCommunities_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _CommunityService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CommunityService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _CommunityService_DeleteCategory_Handler,
		},
		{
			MethodName: "GetCategoryByID",
			Handler:    _CommunityService_GetCategoryByID_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _CommunityService_ListCategories_Handler,
		},
		{
			MethodName: "AddCommunityToCategory",
			Handler:    _CommunityService_AddCommunityToCategory_Handler,
		},
		{
			MethodName: "RemoveCommunityFromCategory",
			Handler:    _CommunityService_RemoveCommunityFromCategory_Handler,
		},
		{
			MethodName: "GetCommunityCategoriesById",
			Handler:    _CommunityService_GetCommunityCategoriesById_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _CommunityService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _CommunityService_RemoveMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _CommunityService_ListMembers_Handler,
		},
		{
			MethodName: "UpdateMemberRole",
			Handler:    _CommunityService_UpdateMemberRole_Handler,
		},
		{
			MethodName: "AddRule",
			Handler:    _CommunityService_AddRule_Handler,
		},
		{
			MethodName: "RemoveRule",
			Handler:    _CommunityService_RemoveRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _CommunityService_ListRules_Handler,
		},
		{
			MethodName: "RequestToJoin",
			Handler:    _CommunityService_RequestToJoin_Handler,
		},
		{
			MethodName: "ApproveJoinRequest",
			Handler:    _CommunityService_ApproveJoinRequest_Handler,
		},
		{
			MethodName: "RejectJoinRequest",
			Handler:    _CommunityService_RejectJoinRequest_Handler,
		},
		{
			MethodName: "ListJoinRequests",
			Handler:    _CommunityService_ListJoinRequests_Handler,
		},
		{
			MethodName: "IsMember",
			Handler:    _CommunityService_IsMember_Handler,
		},
		{
			MethodName: "HasPendingJoinRequest",
			Handler:    _CommunityService_HasPendingJoinRequest_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _CommunityService_CreateChat_Handler,
		},
		{
			MethodName: "AddChatParticipant",
			Handler:    _CommunityService_AddChatParticipant_Handler,
		},
		{
			MethodName: "RemoveChatParticipant",
			Handler:    _CommunityService_RemoveChatParticipant_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _CommunityService_ListChats_Handler,
		},
		{
			MethodName: "ListChatParticipants",
			Handler:    _CommunityService_ListChatParticipants_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _CommunityService_SendMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _CommunityService_DeleteMessage_Handler,
		},
		{
			MethodName: "UnsendMessage",
			Handler:    _CommunityService_UnsendMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _CommunityService_ListMessages_Handler,
		},
		{
			MethodName: "SearchMessages",
			Handler:    _CommunityService_SearchMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/community/community.proto",
}
