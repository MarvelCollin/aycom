syntax = "proto3";

package thread;

option go_package = "aycom/backend/proto/thread";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Thread Service definition
service ThreadService {
  // Thread operations
  rpc CreateThread(CreateThreadRequest) returns (ThreadResponse);
  rpc GetThreadById(GetThreadRequest) returns (ThreadResponse);
  rpc GetThreadsByUser(GetThreadsByUserRequest) returns (ThreadsResponse);
  rpc GetAllThreads(GetAllThreadsRequest) returns (ThreadsResponse);
  rpc UpdateThread(UpdateThreadRequest) returns (ThreadResponse);
  rpc DeleteThread(DeleteThreadRequest) returns (google.protobuf.Empty);

  // Reply operations
  rpc CreateReply(CreateReplyRequest) returns (ReplyResponse);
  rpc GetRepliesByThread(GetRepliesByThreadRequest) returns (RepliesResponse);
  rpc UpdateReply(UpdateReplyRequest) returns (ReplyResponse);
  rpc DeleteReply(DeleteReplyRequest) returns (google.protobuf.Empty);

  // Interaction operations
  rpc LikeThread(LikeThreadRequest) returns (google.protobuf.Empty);
  rpc UnlikeThread(UnlikeThreadRequest) returns (google.protobuf.Empty);
  rpc LikeReply(LikeReplyRequest) returns (google.protobuf.Empty);
  rpc UnlikeReply(UnlikeReplyRequest) returns (google.protobuf.Empty);
  rpc RepostThread(RepostThreadRequest) returns (google.protobuf.Empty);
  rpc RemoveRepost(RemoveRepostRequest) returns (google.protobuf.Empty);
  rpc BookmarkThread(BookmarkThreadRequest) returns (google.protobuf.Empty);
  rpc RemoveBookmark(RemoveBookmarkRequest) returns (google.protobuf.Empty);

  // Poll operations
  rpc CreatePoll(CreatePollRequest) returns (PollResponse);
  rpc VotePoll(VotePollRequest) returns (google.protobuf.Empty);
  rpc GetPollResults(GetPollResultsRequest) returns (PollResultsResponse);

  // Trending hashtags
  rpc GetTrendingHashtags(GetTrendingHashtagsRequest) returns (GetTrendingHashtagsResponse);
}

// Thread message
message Thread {
  string id = 1;
  string user_id = 2;
  string content = 3;
  repeated Media media = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  int64 view_count = 7;
  optional Poll poll = 8;
  optional string community_id = 9;
  optional bool is_pinned = 10;
  optional string who_can_reply = 11;
  optional google.protobuf.Timestamp scheduled_at = 12;
  optional bool is_advertisement = 13;
}

// Media message
message Media {
  string id = 1;
  string url = 2;
  string type = 3; // "image", "video", etc.
}

// Poll message
message Poll {
  string id = 1;
  string question = 2;
  repeated PollOption options = 3;
  google.protobuf.Timestamp end_time = 4;
  bool is_anonymous = 5;
}

// Poll option message
message PollOption {
  string id = 1;
  string text = 2;
}

// Reply message
message Reply {
  string id = 1;
  string thread_id = 2;
  string user_id = 3;
  string content = 4;
  repeated Media media = 5;
  string parent_id = 6; // Optional, for replies to replies
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  optional bool is_pinned = 9;
}

// CreateThreadRequest message
message CreateThreadRequest {
  string user_id = 1;
  string content = 2;
  repeated Media media = 3;
  optional PollRequest poll = 4;
  optional string community_id = 5;
  optional google.protobuf.Timestamp scheduled_at = 6;
  optional string who_can_reply = 7;
  optional bool is_advertisement = 8;
  repeated string hashtags = 9;
  repeated string mentioned_user_ids = 10;
}

// PollRequest message for creating polls
message PollRequest {
  string question = 1;
  repeated string options = 2;
  google.protobuf.Timestamp end_time = 3;
  bool is_anonymous = 4;
}

// GetThreadRequest message
message GetThreadRequest {
  string thread_id = 1;
}

// GetThreadsByUserRequest message
message GetThreadsByUserRequest {
  string user_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

// GetAllThreadsRequest message
message GetAllThreadsRequest {
  int32 page = 1;
  int32 limit = 2;
}

// UpdateThreadRequest message
message UpdateThreadRequest {
  string thread_id = 1;
  string user_id = 2;
  string content = 3;
  repeated Media media = 4;
  optional bool is_pinned = 5;
  repeated string add_category_names = 6;
  repeated string remove_category_names = 7;
  repeated string add_hashtags = 8;
  repeated string remove_hashtags = 9;
}

// DeleteThreadRequest message
message DeleteThreadRequest {
  string thread_id = 1;
  string user_id = 2;
}

// CreateReplyRequest message
message CreateReplyRequest {
  string thread_id = 1;
  string user_id = 2;
  string content = 3;
  repeated Media media = 4;
  string parent_id = 5; // Optional, for replies to replies
  optional string parent_reply_id = 6;
  repeated string mentioned_user_ids = 7;
}

// GetRepliesByThreadRequest message
message GetRepliesByThreadRequest {
  string thread_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

// UpdateReplyRequest message
message UpdateReplyRequest {
  string reply_id = 1;
  string user_id = 2;
  string content = 3;
  repeated Media media = 4;
  optional bool is_pinned = 5;
}

// DeleteReplyRequest message
message DeleteReplyRequest {
  string reply_id = 1;
  string user_id = 2;
}

// LikeThreadRequest message
message LikeThreadRequest {
  string thread_id = 1;
  string user_id = 2;
}

// UnlikeThreadRequest message
message UnlikeThreadRequest {
  string thread_id = 1;
  string user_id = 2;
}

// LikeReplyRequest message
message LikeReplyRequest {
  string reply_id = 1;
  string user_id = 2;
}

// UnlikeReplyRequest message
message UnlikeReplyRequest {
  string reply_id = 1;
  string user_id = 2;
}

// RepostThreadRequest message
message RepostThreadRequest {
  string thread_id = 1;
  string user_id = 2;
  optional string added_content = 3;
}

// RemoveRepostRequest message
message RemoveRepostRequest {
  string thread_id = 1;
  string user_id = 2;
}

// BookmarkThreadRequest message
message BookmarkThreadRequest {
  string thread_id = 1;
  string user_id = 2;
}

// RemoveBookmarkRequest message
message RemoveBookmarkRequest {
  string thread_id = 1;
  string user_id = 2;
}

// CreatePollRequest message
message CreatePollRequest {
  string thread_id = 1;
  PollRequest poll = 2;
}

// VotePollRequest message
message VotePollRequest {
  string poll_id = 1;
  string option_id = 2;
  string user_id = 3;
}

// GetPollResultsRequest message
message GetPollResultsRequest {
  string poll_id = 1;
}

// ThreadResponse message
message ThreadResponse {
  Thread thread = 1;
  User user = 2;
  int64 likes_count = 3;
  int64 replies_count = 4;
  int64 reposts_count = 5;
  bool liked_by_user = 6;
  bool reposted_by_user = 7;
  bool bookmarked_by_user = 8;
  optional PollResponse poll = 9;
  repeated string hashtags = 10;
  repeated string mentioned_user_ids = 11;
  optional string community_name = 12;
  int64 bookmark_count = 13;
}

// ThreadsResponse message
message ThreadsResponse {
  repeated ThreadResponse threads = 1;
  int32 total = 2;
}

// ReplyResponse message
message ReplyResponse {
  Reply reply = 1;
  User user = 2;
  int64 likes_count = 3;
  bool liked_by_user = 4;
  repeated string mentioned_user_ids = 5;
  User parent_user = 6;
  optional string parent_content = 7;
}

// RepliesResponse message
message RepliesResponse {
  repeated ReplyResponse replies = 1;
  int32 total = 2;
}

// PollResponse message
message PollResponse {
  Poll poll = 1;
  repeated PollOptionResult results = 2;
  int64 total_votes = 3;
  optional string user_vote_option_id = 4;
  bool has_ended = 5;
}

// PollResultsResponse message
message PollResultsResponse {
  repeated PollOptionResult results = 1;
  int64 total_votes = 2;
  optional string user_vote_option_id = 3;
  bool has_ended = 4;
}

// PollOptionResult message
message PollOptionResult {
  string option_id = 1;
  string text = 2;
  int64 votes = 3;
  float percentage = 4;
}

// User message - minimal info needed for thread/reply display
message User {
  string id = 1;
  string name = 2;
  string username = 3;
  string profile_picture_url = 4;
  bool is_verified = 5;
}

// HashtagResponse message
message HashtagResponse {
  string name = 1;
  int64 count = 2;
}

// GetTrendingHashtagsRequest message
message GetTrendingHashtagsRequest {
  int32 limit = 1;
}

// GetTrendingHashtagsResponse message
message GetTrendingHashtagsResponse {
  repeated HashtagResponse hashtags = 1;
} 