services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:${API_GATEWAY_PORT:-8082}/api/v1
      - VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - VITE_RECAPTCHA_SITE_KEY=${RECAPTCHA_SITE_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: always
    depends_on:
      - api_gateway
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # API Gateway
  api_gateway:
    build:
      context: .
      dockerfile: ./backend/api-gateway/Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-8082}:8081"
    environment:
      - USER_SERVICE_HOST=user_service
      - USER_SERVICE_PORT=9091
      - THREAD_SERVICE_HOST=thread_service
      - THREAD_SERVICE_PORT=9092
      - JWT_SECRET=${JWT_SECRET:-wompwomp123}
      - TLS_ENABLED=${TLS_ENABLED:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:-}
    depends_on:
      - user_service
      - thread_service
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  # User Service - Profile Management
  user_service:
    build:
      context: ./backend
      dockerfile: ./services/user/Dockerfile
    ports:
      - "9091:9091"
    environment:
      - DATABASE_HOST=user_db
      - DATABASE_PORT=5432
      - DATABASE_USER=${USER_DB_USER:-kolin}
      - DATABASE_PASSWORD=${USER_DB_PASSWORD:-kolin}
      - DATABASE_NAME=${USER_DB_NAME:-user_db}
      - DATABASE_URL=postgresql://${USER_DB_USER:-kolin}:${USER_DB_PASSWORD:-kolin}@user_db:5432/${USER_DB_NAME:-user_db}
      - JWT_SECRET=${JWT_SECRET:-wompwomp123}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      user_db:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  # Thread Service - Thread Management
  thread_service:
    build:
      context: ./backend
      dockerfile: ./services/thread/Dockerfile
    ports:
      - "9092:9092"
    environment:
      - DB_HOST=thread_db
      - DB_PORT=5432
      - DB_USER=${THREAD_DB_USER:-kolin}
      - DB_PASSWORD=${THREAD_DB_PASSWORD:-kolin}
      - DB_NAME=${THREAD_DB_NAME:-thread_db}
      - DB_SSLMODE=disable
      - THREAD_SERVICE_PORT=9092
      - USER_SERVICE_HOST=user_service
      - USER_SERVICE_PORT=9091
      - JWT_SECRET=${JWT_SECRET:-wompwomp123}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      thread_db:
        condition: service_healthy
      user_service:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  # Event Bus Service
  event_bus:
    build:
      context: ./backend/event-bus
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - USER_SERVICE_HOST=user_service
      - USER_SERVICE_PORT=9091
      - THREAD_SERVICE_HOST=thread_service
      - THREAD_SERVICE_PORT=9092
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      rabbitmq:
        condition: service_healthy
      user_service:
        condition: service_started
      thread_service:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # User Service Database
  user_db:
    image: postgres:14-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=${USER_DB_USER:-kolin}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD:-kolin}
      - POSTGRES_DB=${USER_DB_NAME:-user_db}
    volumes:
      - user_db_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER:-kolin}"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  # Thread Service Database
  thread_db:
    image: postgres:14-alpine
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=${THREAD_DB_USER:-kolin}
      - POSTGRES_PASSWORD=${THREAD_DB_PASSWORD:-kolin}
      - POSTGRES_DB=${THREAD_DB_NAME:-thread_db}
    volumes:
      - thread_db_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${THREAD_DB_USER:-kolin}"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # RabbitMQ for messaging
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

volumes:
  user_db_data:
  thread_db_data:
  redis_data:
  rabbitmq_data: