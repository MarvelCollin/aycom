version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:5173"
    environment:
      - VITE_API_BASE_URL=${API_GATEWAY_PORT:-8080}/api/v1
      - VITE_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - VITE_RECAPTCHA_SITE_KEY=${VITE_RECAPTCHA_SITE_KEY:-6Ldr5iYrAAAAAM2qFrNO3E7Bz-H1Ze46W_uq6bQl}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: always

  # API Gateway
  api_gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      - USER_SERVICE_HOST=user_service
      - USER_SERVICE_PORT=9091
      - AUTH_SERVICE_HOST=auth_service
      - AUTH_SERVICE_PORT=9090
    depends_on:
      - user_service
      - auth_service
    restart: always

  # User Service - Profile Management
  user_service:
    build:
      context: ./backend/services/user
      dockerfile: Dockerfile
    ports:
      - "9091:9091"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER:-postgres}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
      - DATABASE_NAME=user_db
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_password}@postgres:5432/user_db
      - AUTH_SERVICE_HOST=auth_service
      - AUTH_SERVICE_PORT=9090
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    entrypoint: ["sh", "./entrypoint.sh"]

  # Auth Service - Authentication & Authorization
  auth_service:
    build:
      context: ./backend/services/auth
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER:-postgres}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
      - DATABASE_NAME=auth_db
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_password}@postgres:5432/auth_db
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - REDIS_URL=redis://redis:6379/0
      - USER_SERVICE_HOST=user_service
      - USER_SERVICE_PORT=9091
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
    restart: always
    entrypoint: ["sh", "./entrypoint.sh"]

  # Event Bus Service
  event_bus:
    build:
      context: ./backend/event-bus
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - USER_SERVICE_HOST=user_service
      - USER_SERVICE_PORT=9091
      - AUTH_SERVICE_HOST=auth_service
      - AUTH_SERVICE_PORT=9090
    depends_on:
      - rabbitmq
      - user_service
      - auth_service
    restart: always

  # Single PostgreSQL Database for all services
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init.sh:/docker-entrypoint-initdb.d/db-init.sh
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  # RabbitMQ for messaging
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: